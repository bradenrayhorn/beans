// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: months.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

const createMonth = `-- name: CreateMonth :exec
INSERT INTO months (
  id, budget_id, date, carryover
) VALUES ($1, $2, $3, $4)
`

type CreateMonthParams struct {
	ID        string
	BudgetID  string
	Date      time.Time
	Carryover pgtype.Numeric
}

func (q *Queries) CreateMonth(ctx context.Context, arg CreateMonthParams) error {
	_, err := q.db.Exec(ctx, createMonth,
		arg.ID,
		arg.BudgetID,
		arg.Date,
		arg.Carryover,
	)
	return err
}

const getMonthByDate = `-- name: GetMonthByDate :one
SELECT id, budget_id, date, carryover, created_at FROM months WHERE budget_id = $1 AND date = $2
`

type GetMonthByDateParams struct {
	BudgetID string
	Date     time.Time
}

func (q *Queries) GetMonthByDate(ctx context.Context, arg GetMonthByDateParams) (Month, error) {
	row := q.db.QueryRow(ctx, getMonthByDate, arg.BudgetID, arg.Date)
	var i Month
	err := row.Scan(
		&i.ID,
		&i.BudgetID,
		&i.Date,
		&i.Carryover,
		&i.CreatedAt,
	)
	return i, err
}

const getMonthByID = `-- name: GetMonthByID :one
SELECT id, budget_id, date, carryover, created_at FROM months WHERE id = $1
`

func (q *Queries) GetMonthByID(ctx context.Context, id string) (Month, error) {
	row := q.db.QueryRow(ctx, getMonthByID, id)
	var i Month
	err := row.Scan(
		&i.ID,
		&i.BudgetID,
		&i.Date,
		&i.Carryover,
		&i.CreatedAt,
	)
	return i, err
}

const getMonthsByBudget = `-- name: GetMonthsByBudget :many
SELECT id, budget_id, date, carryover, created_at FROM months WHERE budget_id = $1
`

func (q *Queries) GetMonthsByBudget(ctx context.Context, budgetID string) ([]Month, error) {
	rows, err := q.db.Query(ctx, getMonthsByBudget, budgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Month
	for rows.Next() {
		var i Month
		if err := rows.Scan(
			&i.ID,
			&i.BudgetID,
			&i.Date,
			&i.Carryover,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewestMonth = `-- name: GetNewestMonth :one
SELECT id, budget_id, date, carryover, created_at FROM months WHERE budget_id = $1 ORDER BY date desc LIMIT 1
`

func (q *Queries) GetNewestMonth(ctx context.Context, budgetID string) (Month, error) {
	row := q.db.QueryRow(ctx, getNewestMonth, budgetID)
	var i Month
	err := row.Scan(
		&i.ID,
		&i.BudgetID,
		&i.Date,
		&i.Carryover,
		&i.CreatedAt,
	)
	return i, err
}

const updateMonth = `-- name: UpdateMonth :exec
UPDATE months
  SET carryover = $1
  WHERE id = $2
`

type UpdateMonthParams struct {
	Carryover pgtype.Numeric
	ID        string
}

func (q *Queries) UpdateMonth(ctx context.Context, arg UpdateMonthParams) error {
	_, err := q.db.Exec(ctx, updateMonth, arg.Carryover, arg.ID)
	return err
}
