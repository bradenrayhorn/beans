// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beans "github.com/bradenrayhorn/beans/beans"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, activeBudget, t
func (_m *TransactionService) Create(ctx context.Context, activeBudget *beans.Budget, t beans.TransactionCreate) (*beans.Transaction, error) {
	ret := _m.Called(ctx, activeBudget, t)

	var r0 *beans.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *beans.Budget, beans.TransactionCreate) *beans.Transaction); ok {
		r0 = rf(ctx, activeBudget, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*beans.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *beans.Budget, beans.TransactionCreate) error); ok {
		r1 = rf(ctx, activeBudget, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
