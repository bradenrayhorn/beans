// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"context"
	"sync"

	beans "github.com/bradenrayhorn/beans/beans"
)

// MockAccountContract is a mock implementation of the AccountContract
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockAccountContract struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccountContractCreateFunc
	// GetAllFunc is an instance of a mock function object controlling the
	// behavior of the method GetAll.
	GetAllFunc *AccountContractGetAllFunc
}

// NewMockAccountContract creates a new mock of the AccountContract
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAccountContract() *MockAccountContract {
	return &MockAccountContract{
		CreateFunc: &AccountContractCreateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.Name) (r0 *beans.Account, r1 error) {
				return
			},
		},
		GetAllFunc: &AccountContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) (r0 []*beans.Account, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAccountContract creates a new mock of the AccountContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAccountContract() *MockAccountContract {
	return &MockAccountContract{
		CreateFunc: &AccountContractCreateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error) {
				panic("unexpected invocation of MockAccountContract.Create")
			},
		},
		GetAllFunc: &AccountContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error) {
				panic("unexpected invocation of MockAccountContract.GetAll")
			},
		},
	}
}

// NewMockAccountContractFrom creates a new mock of the MockAccountContract
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockAccountContractFrom(i beans.AccountContract) *MockAccountContract {
	return &MockAccountContract{
		CreateFunc: &AccountContractCreateFunc{
			defaultHook: i.Create,
		},
		GetAllFunc: &AccountContractGetAllFunc{
			defaultHook: i.GetAll,
		},
	}
}

// AccountContractCreateFunc describes the behavior when the Create method
// of the parent MockAccountContract instance is invoked.
type AccountContractCreateFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error)
	history     []AccountContractCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccountContract) Create(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.Name) (*beans.Account, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(AccountContractCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccountContract instance is invoked and the hook queue is
// empty.
func (f *AccountContractCreateFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccountContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccountContractCreateFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountContractCreateFunc) SetDefaultReturn(r0 *beans.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountContractCreateFunc) PushReturn(r0 *beans.Account, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error) {
		return r0, r1
	})
}

func (f *AccountContractCreateFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountContractCreateFunc) appendCall(r0 AccountContractCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountContractCreateFuncCall objects
// describing the invocations of this function.
func (f *AccountContractCreateFunc) History() []AccountContractCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccountContractCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountContractCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockAccountContract.
type AccountContractCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountContractCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountContractCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccountContractGetAllFunc describes the behavior when the GetAll method
// of the parent MockAccountContract instance is invoked.
type AccountContractGetAllFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error)
	history     []AccountContractGetAllFuncCall
	mutex       sync.Mutex
}

// GetAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccountContract) GetAll(v0 context.Context, v1 *beans.BudgetAuthContext) ([]*beans.Account, error) {
	r0, r1 := m.GetAllFunc.nextHook()(v0, v1)
	m.GetAllFunc.appendCall(AccountContractGetAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAll method of the
// parent MockAccountContract instance is invoked and the hook queue is
// empty.
func (f *AccountContractGetAllFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAll method of the parent MockAccountContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccountContractGetAllFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountContractGetAllFunc) SetDefaultReturn(r0 []*beans.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountContractGetAllFunc) PushReturn(r0 []*beans.Account, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error) {
		return r0, r1
	})
}

func (f *AccountContractGetAllFunc) nextHook() func(context.Context, *beans.BudgetAuthContext) ([]*beans.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountContractGetAllFunc) appendCall(r0 AccountContractGetAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountContractGetAllFuncCall objects
// describing the invocations of this function.
func (f *AccountContractGetAllFunc) History() []AccountContractGetAllFuncCall {
	f.mutex.Lock()
	history := make([]AccountContractGetAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountContractGetAllFuncCall is an object that describes an invocation
// of method GetAll on an instance of MockAccountContract.
type AccountContractGetAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountContractGetAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountContractGetAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockAccountRepository is a mock implementation of the AccountRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockAccountRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccountRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *AccountRepositoryGetFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *AccountRepositoryGetForBudgetFunc
}

// NewMockAccountRepository creates a new mock of the AccountRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAccountRepository() *MockAccountRepository {
	return &MockAccountRepository{
		CreateFunc: &AccountRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name, beans.ID) (r0 error) {
				return
			},
		},
		GetFunc: &AccountRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Account, r1 error) {
				return
			},
		},
		GetForBudgetFunc: &AccountRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Account, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAccountRepository creates a new mock of the
// AccountRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAccountRepository() *MockAccountRepository {
	return &MockAccountRepository{
		CreateFunc: &AccountRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name, beans.ID) error {
				panic("unexpected invocation of MockAccountRepository.Create")
			},
		},
		GetFunc: &AccountRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Account, error) {
				panic("unexpected invocation of MockAccountRepository.Get")
			},
		},
		GetForBudgetFunc: &AccountRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Account, error) {
				panic("unexpected invocation of MockAccountRepository.GetForBudget")
			},
		},
	}
}

// NewMockAccountRepositoryFrom creates a new mock of the
// MockAccountRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAccountRepositoryFrom(i beans.AccountRepository) *MockAccountRepository {
	return &MockAccountRepository{
		CreateFunc: &AccountRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &AccountRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetForBudgetFunc: &AccountRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
	}
}

// AccountRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockAccountRepository instance is invoked.
type AccountRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Name, beans.ID) error
	hooks       []func(context.Context, beans.ID, beans.Name, beans.ID) error
	history     []AccountRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccountRepository) Create(v0 context.Context, v1 beans.ID, v2 beans.Name, v3 beans.ID) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(AccountRepositoryCreateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccountRepository instance is invoked and the hook queue is
// empty.
func (f *AccountRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Name, beans.ID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccountRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccountRepositoryCreateFunc) PushHook(hook func(context.Context, beans.ID, beans.Name, beans.ID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Name, beans.ID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Name, beans.ID) error {
		return r0
	})
}

func (f *AccountRepositoryCreateFunc) nextHook() func(context.Context, beans.ID, beans.Name, beans.ID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountRepositoryCreateFunc) appendCall(r0 AccountRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *AccountRepositoryCreateFunc) History() []AccountRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccountRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockAccountRepository.
type AccountRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccountRepositoryGetFunc describes the behavior when the Get method of
// the parent MockAccountRepository instance is invoked.
type AccountRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Account, error)
	hooks       []func(context.Context, beans.ID) (*beans.Account, error)
	history     []AccountRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccountRepository) Get(v0 context.Context, v1 beans.ID) (*beans.Account, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(AccountRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockAccountRepository instance is invoked and the hook queue is
// empty.
func (f *AccountRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockAccountRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccountRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountRepositoryGetFunc) SetDefaultReturn(r0 *beans.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountRepositoryGetFunc) PushReturn(r0 *beans.Account, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Account, error) {
		return r0, r1
	})
}

func (f *AccountRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountRepositoryGetFunc) appendCall(r0 AccountRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *AccountRepositoryGetFunc) History() []AccountRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]AccountRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockAccountRepository.
type AccountRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccountRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockAccountRepository instance is
// invoked.
type AccountRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Account, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Account, error)
	history     []AccountRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccountRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Account, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(AccountRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockAccountRepository instance is invoked and the hook
// queue is empty.
func (f *AccountRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockAccountRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccountRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Account, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Account, error) {
		return r0, r1
	})
}

func (f *AccountRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountRepositoryGetForBudgetFunc) appendCall(r0 AccountRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountRepositoryGetForBudgetFuncCall
// objects describing the invocations of this function.
func (f *AccountRepositoryGetForBudgetFunc) History() []AccountRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]AccountRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of
// MockAccountRepository.
type AccountRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockBudgetContract is a mock implementation of the BudgetContract
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockBudgetContract struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *BudgetContractCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *BudgetContractGetFunc
	// GetAllFunc is an instance of a mock function object controlling the
	// behavior of the method GetAll.
	GetAllFunc *BudgetContractGetAllFunc
}

// NewMockBudgetContract creates a new mock of the BudgetContract interface.
// All methods return zero values for all results, unless overwritten.
func NewMockBudgetContract() *MockBudgetContract {
	return &MockBudgetContract{
		CreateFunc: &BudgetContractCreateFunc{
			defaultHook: func(context.Context, *beans.AuthContext, beans.Name) (r0 *beans.Budget, r1 error) {
				return
			},
		},
		GetFunc: &BudgetContractGetFunc{
			defaultHook: func(context.Context, *beans.AuthContext, beans.ID) (r0 *beans.Budget, r1 error) {
				return
			},
		},
		GetAllFunc: &BudgetContractGetAllFunc{
			defaultHook: func(context.Context, *beans.AuthContext) (r0 []*beans.Budget, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockBudgetContract creates a new mock of the BudgetContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBudgetContract() *MockBudgetContract {
	return &MockBudgetContract{
		CreateFunc: &BudgetContractCreateFunc{
			defaultHook: func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetContract.Create")
			},
		},
		GetFunc: &BudgetContractGetFunc{
			defaultHook: func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetContract.Get")
			},
		},
		GetAllFunc: &BudgetContractGetAllFunc{
			defaultHook: func(context.Context, *beans.AuthContext) ([]*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetContract.GetAll")
			},
		},
	}
}

// NewMockBudgetContractFrom creates a new mock of the MockBudgetContract
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockBudgetContractFrom(i beans.BudgetContract) *MockBudgetContract {
	return &MockBudgetContract{
		CreateFunc: &BudgetContractCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &BudgetContractGetFunc{
			defaultHook: i.Get,
		},
		GetAllFunc: &BudgetContractGetAllFunc{
			defaultHook: i.GetAll,
		},
	}
}

// BudgetContractCreateFunc describes the behavior when the Create method of
// the parent MockBudgetContract instance is invoked.
type BudgetContractCreateFunc struct {
	defaultHook func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error)
	hooks       []func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error)
	history     []BudgetContractCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBudgetContract) Create(v0 context.Context, v1 *beans.AuthContext, v2 beans.Name) (*beans.Budget, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(BudgetContractCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockBudgetContract instance is invoked and the hook queue is
// empty.
func (f *BudgetContractCreateFunc) SetDefaultHook(hook func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockBudgetContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BudgetContractCreateFunc) PushHook(hook func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetContractCreateFunc) SetDefaultReturn(r0 *beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetContractCreateFunc) PushReturn(r0 *beans.Budget, r1 error) {
	f.PushHook(func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetContractCreateFunc) nextHook() func(context.Context, *beans.AuthContext, beans.Name) (*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetContractCreateFunc) appendCall(r0 BudgetContractCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetContractCreateFuncCall objects
// describing the invocations of this function.
func (f *BudgetContractCreateFunc) History() []BudgetContractCreateFuncCall {
	f.mutex.Lock()
	history := make([]BudgetContractCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetContractCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockBudgetContract.
type BudgetContractCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.AuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetContractCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetContractCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BudgetContractGetFunc describes the behavior when the Get method of the
// parent MockBudgetContract instance is invoked.
type BudgetContractGetFunc struct {
	defaultHook func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error)
	hooks       []func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error)
	history     []BudgetContractGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBudgetContract) Get(v0 context.Context, v1 *beans.AuthContext, v2 beans.ID) (*beans.Budget, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1, v2)
	m.GetFunc.appendCall(BudgetContractGetFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockBudgetContract instance is invoked and the hook queue is
// empty.
func (f *BudgetContractGetFunc) SetDefaultHook(hook func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockBudgetContract instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BudgetContractGetFunc) PushHook(hook func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetContractGetFunc) SetDefaultReturn(r0 *beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetContractGetFunc) PushReturn(r0 *beans.Budget, r1 error) {
	f.PushHook(func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetContractGetFunc) nextHook() func(context.Context, *beans.AuthContext, beans.ID) (*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetContractGetFunc) appendCall(r0 BudgetContractGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetContractGetFuncCall objects
// describing the invocations of this function.
func (f *BudgetContractGetFunc) History() []BudgetContractGetFuncCall {
	f.mutex.Lock()
	history := make([]BudgetContractGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetContractGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockBudgetContract.
type BudgetContractGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.AuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetContractGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetContractGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BudgetContractGetAllFunc describes the behavior when the GetAll method of
// the parent MockBudgetContract instance is invoked.
type BudgetContractGetAllFunc struct {
	defaultHook func(context.Context, *beans.AuthContext) ([]*beans.Budget, error)
	hooks       []func(context.Context, *beans.AuthContext) ([]*beans.Budget, error)
	history     []BudgetContractGetAllFuncCall
	mutex       sync.Mutex
}

// GetAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBudgetContract) GetAll(v0 context.Context, v1 *beans.AuthContext) ([]*beans.Budget, error) {
	r0, r1 := m.GetAllFunc.nextHook()(v0, v1)
	m.GetAllFunc.appendCall(BudgetContractGetAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAll method of the
// parent MockBudgetContract instance is invoked and the hook queue is
// empty.
func (f *BudgetContractGetAllFunc) SetDefaultHook(hook func(context.Context, *beans.AuthContext) ([]*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAll method of the parent MockBudgetContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BudgetContractGetAllFunc) PushHook(hook func(context.Context, *beans.AuthContext) ([]*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetContractGetAllFunc) SetDefaultReturn(r0 []*beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.AuthContext) ([]*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetContractGetAllFunc) PushReturn(r0 []*beans.Budget, r1 error) {
	f.PushHook(func(context.Context, *beans.AuthContext) ([]*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetContractGetAllFunc) nextHook() func(context.Context, *beans.AuthContext) ([]*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetContractGetAllFunc) appendCall(r0 BudgetContractGetAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetContractGetAllFuncCall objects
// describing the invocations of this function.
func (f *BudgetContractGetAllFunc) History() []BudgetContractGetAllFuncCall {
	f.mutex.Lock()
	history := make([]BudgetContractGetAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetContractGetAllFuncCall is an object that describes an invocation of
// method GetAll on an instance of MockBudgetContract.
type BudgetContractGetAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.AuthContext
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetContractGetAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetContractGetAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockBudgetRepository is a mock implementation of the BudgetRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockBudgetRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *BudgetRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *BudgetRepositoryGetFunc
	// GetBudgetsForUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetBudgetsForUser.
	GetBudgetsForUserFunc *BudgetRepositoryGetBudgetsForUserFunc
}

// NewMockBudgetRepository creates a new mock of the BudgetRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockBudgetRepository() *MockBudgetRepository {
	return &MockBudgetRepository{
		CreateFunc: &BudgetRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) (r0 error) {
				return
			},
		},
		GetFunc: &BudgetRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Budget, r1 error) {
				return
			},
		},
		GetBudgetsForUserFunc: &BudgetRepositoryGetBudgetsForUserFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Budget, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockBudgetRepository creates a new mock of the BudgetRepository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBudgetRepository() *MockBudgetRepository {
	return &MockBudgetRepository{
		CreateFunc: &BudgetRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error {
				panic("unexpected invocation of MockBudgetRepository.Create")
			},
		},
		GetFunc: &BudgetRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetRepository.Get")
			},
		},
		GetBudgetsForUserFunc: &BudgetRepositoryGetBudgetsForUserFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetRepository.GetBudgetsForUser")
			},
		},
	}
}

// NewMockBudgetRepositoryFrom creates a new mock of the
// MockBudgetRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockBudgetRepositoryFrom(i beans.BudgetRepository) *MockBudgetRepository {
	return &MockBudgetRepository{
		CreateFunc: &BudgetRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &BudgetRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetBudgetsForUserFunc: &BudgetRepositoryGetBudgetsForUserFunc{
			defaultHook: i.GetBudgetsForUser,
		},
	}
}

// BudgetRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockBudgetRepository instance is invoked.
type BudgetRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error
	hooks       []func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error
	history     []BudgetRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBudgetRepository) Create(v0 context.Context, v1 beans.Tx, v2 beans.ID, v3 beans.Name, v4 beans.ID) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateFunc.appendCall(BudgetRepositoryCreateFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockBudgetRepository instance is invoked and the hook queue is
// empty.
func (f *BudgetRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockBudgetRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BudgetRepositoryCreateFunc) PushHook(hook func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error {
		return r0
	})
}

func (f *BudgetRepositoryCreateFunc) nextHook() func(context.Context, beans.Tx, beans.ID, beans.Name, beans.ID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetRepositoryCreateFunc) appendCall(r0 BudgetRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *BudgetRepositoryCreateFunc) History() []BudgetRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]BudgetRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockBudgetRepository.
type BudgetRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Tx
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.Name
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BudgetRepositoryGetFunc describes the behavior when the Get method of the
// parent MockBudgetRepository instance is invoked.
type BudgetRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Budget, error)
	hooks       []func(context.Context, beans.ID) (*beans.Budget, error)
	history     []BudgetRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBudgetRepository) Get(v0 context.Context, v1 beans.ID) (*beans.Budget, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(BudgetRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockBudgetRepository instance is invoked and the hook queue is
// empty.
func (f *BudgetRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockBudgetRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BudgetRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetRepositoryGetFunc) SetDefaultReturn(r0 *beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetRepositoryGetFunc) PushReturn(r0 *beans.Budget, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetRepositoryGetFunc) appendCall(r0 BudgetRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *BudgetRepositoryGetFunc) History() []BudgetRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]BudgetRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockBudgetRepository.
type BudgetRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BudgetRepositoryGetBudgetsForUserFunc describes the behavior when the
// GetBudgetsForUser method of the parent MockBudgetRepository instance is
// invoked.
type BudgetRepositoryGetBudgetsForUserFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Budget, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Budget, error)
	history     []BudgetRepositoryGetBudgetsForUserFuncCall
	mutex       sync.Mutex
}

// GetBudgetsForUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBudgetRepository) GetBudgetsForUser(v0 context.Context, v1 beans.ID) ([]*beans.Budget, error) {
	r0, r1 := m.GetBudgetsForUserFunc.nextHook()(v0, v1)
	m.GetBudgetsForUserFunc.appendCall(BudgetRepositoryGetBudgetsForUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBudgetsForUser
// method of the parent MockBudgetRepository instance is invoked and the
// hook queue is empty.
func (f *BudgetRepositoryGetBudgetsForUserFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBudgetsForUser method of the parent MockBudgetRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BudgetRepositoryGetBudgetsForUserFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetRepositoryGetBudgetsForUserFunc) SetDefaultReturn(r0 []*beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetRepositoryGetBudgetsForUserFunc) PushReturn(r0 []*beans.Budget, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetRepositoryGetBudgetsForUserFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetRepositoryGetBudgetsForUserFunc) appendCall(r0 BudgetRepositoryGetBudgetsForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetRepositoryGetBudgetsForUserFuncCall
// objects describing the invocations of this function.
func (f *BudgetRepositoryGetBudgetsForUserFunc) History() []BudgetRepositoryGetBudgetsForUserFuncCall {
	f.mutex.Lock()
	history := make([]BudgetRepositoryGetBudgetsForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetRepositoryGetBudgetsForUserFuncCall is an object that describes an
// invocation of method GetBudgetsForUser on an instance of
// MockBudgetRepository.
type BudgetRepositoryGetBudgetsForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetRepositoryGetBudgetsForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetRepositoryGetBudgetsForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockCategoryContract is a mock implementation of the CategoryContract
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockCategoryContract struct {
	// CreateCategoryFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCategory.
	CreateCategoryFunc *CategoryContractCreateCategoryFunc
	// CreateGroupFunc is an instance of a mock function object controlling
	// the behavior of the method CreateGroup.
	CreateGroupFunc *CategoryContractCreateGroupFunc
	// GetAllFunc is an instance of a mock function object controlling the
	// behavior of the method GetAll.
	GetAllFunc *CategoryContractGetAllFunc
}

// NewMockCategoryContract creates a new mock of the CategoryContract
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockCategoryContract() *MockCategoryContract {
	return &MockCategoryContract{
		CreateCategoryFunc: &CategoryContractCreateCategoryFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (r0 *beans.Category, r1 error) {
				return
			},
		},
		CreateGroupFunc: &CategoryContractCreateGroupFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.Name) (r0 *beans.CategoryGroup, r1 error) {
				return
			},
		},
		GetAllFunc: &CategoryContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) (r0 []*beans.CategoryGroup, r1 []*beans.Category, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockCategoryContract creates a new mock of the CategoryContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockCategoryContract() *MockCategoryContract {
	return &MockCategoryContract{
		CreateCategoryFunc: &CategoryContractCreateCategoryFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error) {
				panic("unexpected invocation of MockCategoryContract.CreateCategory")
			},
		},
		CreateGroupFunc: &CategoryContractCreateGroupFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error) {
				panic("unexpected invocation of MockCategoryContract.CreateGroup")
			},
		},
		GetAllFunc: &CategoryContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error) {
				panic("unexpected invocation of MockCategoryContract.GetAll")
			},
		},
	}
}

// NewMockCategoryContractFrom creates a new mock of the
// MockCategoryContract interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockCategoryContractFrom(i beans.CategoryContract) *MockCategoryContract {
	return &MockCategoryContract{
		CreateCategoryFunc: &CategoryContractCreateCategoryFunc{
			defaultHook: i.CreateCategory,
		},
		CreateGroupFunc: &CategoryContractCreateGroupFunc{
			defaultHook: i.CreateGroup,
		},
		GetAllFunc: &CategoryContractGetAllFunc{
			defaultHook: i.GetAll,
		},
	}
}

// CategoryContractCreateCategoryFunc describes the behavior when the
// CreateCategory method of the parent MockCategoryContract instance is
// invoked.
type CategoryContractCreateCategoryFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error)
	history     []CategoryContractCreateCategoryFuncCall
	mutex       sync.Mutex
}

// CreateCategory delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCategoryContract) CreateCategory(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.ID, v3 beans.Name) (*beans.Category, error) {
	r0, r1 := m.CreateCategoryFunc.nextHook()(v0, v1, v2, v3)
	m.CreateCategoryFunc.appendCall(CategoryContractCreateCategoryFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateCategory
// method of the parent MockCategoryContract instance is invoked and the
// hook queue is empty.
func (f *CategoryContractCreateCategoryFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCategory method of the parent MockCategoryContract instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryContractCreateCategoryFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryContractCreateCategoryFunc) SetDefaultReturn(r0 *beans.Category, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryContractCreateCategoryFunc) PushReturn(r0 *beans.Category, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error) {
		return r0, r1
	})
}

func (f *CategoryContractCreateCategoryFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Name) (*beans.Category, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryContractCreateCategoryFunc) appendCall(r0 CategoryContractCreateCategoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryContractCreateCategoryFuncCall
// objects describing the invocations of this function.
func (f *CategoryContractCreateCategoryFunc) History() []CategoryContractCreateCategoryFuncCall {
	f.mutex.Lock()
	history := make([]CategoryContractCreateCategoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryContractCreateCategoryFuncCall is an object that describes an
// invocation of method CreateCategory on an instance of
// MockCategoryContract.
type CategoryContractCreateCategoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Category
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryContractCreateCategoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryContractCreateCategoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryContractCreateGroupFunc describes the behavior when the
// CreateGroup method of the parent MockCategoryContract instance is
// invoked.
type CategoryContractCreateGroupFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error)
	history     []CategoryContractCreateGroupFuncCall
	mutex       sync.Mutex
}

// CreateGroup delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryContract) CreateGroup(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.Name) (*beans.CategoryGroup, error) {
	r0, r1 := m.CreateGroupFunc.nextHook()(v0, v1, v2)
	m.CreateGroupFunc.appendCall(CategoryContractCreateGroupFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateGroup method
// of the parent MockCategoryContract instance is invoked and the hook queue
// is empty.
func (f *CategoryContractCreateGroupFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateGroup method of the parent MockCategoryContract instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryContractCreateGroupFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryContractCreateGroupFunc) SetDefaultReturn(r0 *beans.CategoryGroup, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryContractCreateGroupFunc) PushReturn(r0 *beans.CategoryGroup, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error) {
		return r0, r1
	})
}

func (f *CategoryContractCreateGroupFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.CategoryGroup, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryContractCreateGroupFunc) appendCall(r0 CategoryContractCreateGroupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryContractCreateGroupFuncCall objects
// describing the invocations of this function.
func (f *CategoryContractCreateGroupFunc) History() []CategoryContractCreateGroupFuncCall {
	f.mutex.Lock()
	history := make([]CategoryContractCreateGroupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryContractCreateGroupFuncCall is an object that describes an
// invocation of method CreateGroup on an instance of MockCategoryContract.
type CategoryContractCreateGroupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.CategoryGroup
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryContractCreateGroupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryContractCreateGroupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryContractGetAllFunc describes the behavior when the GetAll method
// of the parent MockCategoryContract instance is invoked.
type CategoryContractGetAllFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error)
	history     []CategoryContractGetAllFuncCall
	mutex       sync.Mutex
}

// GetAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCategoryContract) GetAll(v0 context.Context, v1 *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error) {
	r0, r1, r2 := m.GetAllFunc.nextHook()(v0, v1)
	m.GetAllFunc.appendCall(CategoryContractGetAllFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetAll method of the
// parent MockCategoryContract instance is invoked and the hook queue is
// empty.
func (f *CategoryContractGetAllFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAll method of the parent MockCategoryContract instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CategoryContractGetAllFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryContractGetAllFunc) SetDefaultReturn(r0 []*beans.CategoryGroup, r1 []*beans.Category, r2 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryContractGetAllFunc) PushReturn(r0 []*beans.CategoryGroup, r1 []*beans.Category, r2 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error) {
		return r0, r1, r2
	})
}

func (f *CategoryContractGetAllFunc) nextHook() func(context.Context, *beans.BudgetAuthContext) ([]*beans.CategoryGroup, []*beans.Category, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryContractGetAllFunc) appendCall(r0 CategoryContractGetAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryContractGetAllFuncCall objects
// describing the invocations of this function.
func (f *CategoryContractGetAllFunc) History() []CategoryContractGetAllFuncCall {
	f.mutex.Lock()
	history := make([]CategoryContractGetAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryContractGetAllFuncCall is an object that describes an invocation
// of method GetAll on an instance of MockCategoryContract.
type CategoryContractGetAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.CategoryGroup
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []*beans.Category
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryContractGetAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryContractGetAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockCategoryRepository is a mock implementation of the CategoryRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockCategoryRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *CategoryRepositoryCreateFunc
	// CreateGroupFunc is an instance of a mock function object controlling
	// the behavior of the method CreateGroup.
	CreateGroupFunc *CategoryRepositoryCreateGroupFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *CategoryRepositoryGetForBudgetFunc
	// GetGroupsForBudgetFunc is an instance of a mock function object
	// controlling the behavior of the method GetGroupsForBudget.
	GetGroupsForBudgetFunc *CategoryRepositoryGetGroupsForBudgetFunc
	// GetSingleForBudgetFunc is an instance of a mock function object
	// controlling the behavior of the method GetSingleForBudget.
	GetSingleForBudgetFunc *CategoryRepositoryGetSingleForBudgetFunc
	// GroupExistsFunc is an instance of a mock function object controlling
	// the behavior of the method GroupExists.
	GroupExistsFunc *CategoryRepositoryGroupExistsFunc
}

// NewMockCategoryRepository creates a new mock of the CategoryRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockCategoryRepository() *MockCategoryRepository {
	return &MockCategoryRepository{
		CreateFunc: &CategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.Category) (r0 error) {
				return
			},
		},
		CreateGroupFunc: &CategoryRepositoryCreateGroupFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.CategoryGroup) (r0 error) {
				return
			},
		},
		GetForBudgetFunc: &CategoryRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Category, r1 error) {
				return
			},
		},
		GetGroupsForBudgetFunc: &CategoryRepositoryGetGroupsForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.CategoryGroup, r1 error) {
				return
			},
		},
		GetSingleForBudgetFunc: &CategoryRepositoryGetSingleForBudgetFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (r0 *beans.Category, r1 error) {
				return
			},
		},
		GroupExistsFunc: &CategoryRepositoryGroupExistsFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (r0 bool, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockCategoryRepository creates a new mock of the
// CategoryRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockCategoryRepository() *MockCategoryRepository {
	return &MockCategoryRepository{
		CreateFunc: &CategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.Category) error {
				panic("unexpected invocation of MockCategoryRepository.Create")
			},
		},
		CreateGroupFunc: &CategoryRepositoryCreateGroupFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.CategoryGroup) error {
				panic("unexpected invocation of MockCategoryRepository.CreateGroup")
			},
		},
		GetForBudgetFunc: &CategoryRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Category, error) {
				panic("unexpected invocation of MockCategoryRepository.GetForBudget")
			},
		},
		GetGroupsForBudgetFunc: &CategoryRepositoryGetGroupsForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
				panic("unexpected invocation of MockCategoryRepository.GetGroupsForBudget")
			},
		},
		GetSingleForBudgetFunc: &CategoryRepositoryGetSingleForBudgetFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
				panic("unexpected invocation of MockCategoryRepository.GetSingleForBudget")
			},
		},
		GroupExistsFunc: &CategoryRepositoryGroupExistsFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (bool, error) {
				panic("unexpected invocation of MockCategoryRepository.GroupExists")
			},
		},
	}
}

// NewMockCategoryRepositoryFrom creates a new mock of the
// MockCategoryRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockCategoryRepositoryFrom(i beans.CategoryRepository) *MockCategoryRepository {
	return &MockCategoryRepository{
		CreateFunc: &CategoryRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		CreateGroupFunc: &CategoryRepositoryCreateGroupFunc{
			defaultHook: i.CreateGroup,
		},
		GetForBudgetFunc: &CategoryRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
		GetGroupsForBudgetFunc: &CategoryRepositoryGetGroupsForBudgetFunc{
			defaultHook: i.GetGroupsForBudget,
		},
		GetSingleForBudgetFunc: &CategoryRepositoryGetSingleForBudgetFunc{
			defaultHook: i.GetSingleForBudget,
		},
		GroupExistsFunc: &CategoryRepositoryGroupExistsFunc{
			defaultHook: i.GroupExists,
		},
	}
}

// CategoryRepositoryCreateFunc describes the behavior when the Create
// method of the parent MockCategoryRepository instance is invoked.
type CategoryRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.Tx, *beans.Category) error
	hooks       []func(context.Context, beans.Tx, *beans.Category) error
	history     []CategoryRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCategoryRepository) Create(v0 context.Context, v1 beans.Tx, v2 *beans.Category) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(CategoryRepositoryCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockCategoryRepository instance is invoked and the hook queue is
// empty.
func (f *CategoryRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.Tx, *beans.Category) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockCategoryRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CategoryRepositoryCreateFunc) PushHook(hook func(context.Context, beans.Tx, *beans.Category) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.Tx, *beans.Category) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.Tx, *beans.Category) error {
		return r0
	})
}

func (f *CategoryRepositoryCreateFunc) nextHook() func(context.Context, beans.Tx, *beans.Category) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryCreateFunc) appendCall(r0 CategoryRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *CategoryRepositoryCreateFunc) History() []CategoryRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockCategoryRepository.
type CategoryRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Tx
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *beans.Category
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CategoryRepositoryCreateGroupFunc describes the behavior when the
// CreateGroup method of the parent MockCategoryRepository instance is
// invoked.
type CategoryRepositoryCreateGroupFunc struct {
	defaultHook func(context.Context, beans.Tx, *beans.CategoryGroup) error
	hooks       []func(context.Context, beans.Tx, *beans.CategoryGroup) error
	history     []CategoryRepositoryCreateGroupFuncCall
	mutex       sync.Mutex
}

// CreateGroup delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryRepository) CreateGroup(v0 context.Context, v1 beans.Tx, v2 *beans.CategoryGroup) error {
	r0 := m.CreateGroupFunc.nextHook()(v0, v1, v2)
	m.CreateGroupFunc.appendCall(CategoryRepositoryCreateGroupFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateGroup method
// of the parent MockCategoryRepository instance is invoked and the hook
// queue is empty.
func (f *CategoryRepositoryCreateGroupFunc) SetDefaultHook(hook func(context.Context, beans.Tx, *beans.CategoryGroup) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateGroup method of the parent MockCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryRepositoryCreateGroupFunc) PushHook(hook func(context.Context, beans.Tx, *beans.CategoryGroup) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryCreateGroupFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.Tx, *beans.CategoryGroup) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryCreateGroupFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.Tx, *beans.CategoryGroup) error {
		return r0
	})
}

func (f *CategoryRepositoryCreateGroupFunc) nextHook() func(context.Context, beans.Tx, *beans.CategoryGroup) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryCreateGroupFunc) appendCall(r0 CategoryRepositoryCreateGroupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryCreateGroupFuncCall
// objects describing the invocations of this function.
func (f *CategoryRepositoryCreateGroupFunc) History() []CategoryRepositoryCreateGroupFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryCreateGroupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryCreateGroupFuncCall is an object that describes an
// invocation of method CreateGroup on an instance of
// MockCategoryRepository.
type CategoryRepositoryCreateGroupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Tx
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *beans.CategoryGroup
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryCreateGroupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryCreateGroupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CategoryRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockCategoryRepository instance is
// invoked.
type CategoryRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Category, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Category, error)
	history     []CategoryRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Category, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(CategoryRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockCategoryRepository instance is invoked and the hook
// queue is empty.
func (f *CategoryRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Category, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Category, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Category, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Category, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Category, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Category, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Category, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGetForBudgetFunc) appendCall(r0 CategoryRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryGetForBudgetFuncCall
// objects describing the invocations of this function.
func (f *CategoryRepositoryGetForBudgetFunc) History() []CategoryRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of
// MockCategoryRepository.
type CategoryRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Category
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryRepositoryGetGroupsForBudgetFunc describes the behavior when the
// GetGroupsForBudget method of the parent MockCategoryRepository instance
// is invoked.
type CategoryRepositoryGetGroupsForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)
	history     []CategoryRepositoryGetGroupsForBudgetFuncCall
	mutex       sync.Mutex
}

// GetGroupsForBudget delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCategoryRepository) GetGroupsForBudget(v0 context.Context, v1 beans.ID) ([]*beans.CategoryGroup, error) {
	r0, r1 := m.GetGroupsForBudgetFunc.nextHook()(v0, v1)
	m.GetGroupsForBudgetFunc.appendCall(CategoryRepositoryGetGroupsForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetGroupsForBudget
// method of the parent MockCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGroupsForBudget method of the parent MockCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) SetDefaultReturn(r0 []*beans.CategoryGroup, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) PushReturn(r0 []*beans.CategoryGroup, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGetGroupsForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGetGroupsForBudgetFunc) appendCall(r0 CategoryRepositoryGetGroupsForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CategoryRepositoryGetGroupsForBudgetFuncCall objects describing the
// invocations of this function.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) History() []CategoryRepositoryGetGroupsForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGetGroupsForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGetGroupsForBudgetFuncCall is an object that describes
// an invocation of method GetGroupsForBudget on an instance of
// MockCategoryRepository.
type CategoryRepositoryGetGroupsForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.CategoryGroup
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGetGroupsForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGetGroupsForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryRepositoryGetSingleForBudgetFunc describes the behavior when the
// GetSingleForBudget method of the parent MockCategoryRepository instance
// is invoked.
type CategoryRepositoryGetSingleForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID) (*beans.Category, error)
	hooks       []func(context.Context, beans.ID, beans.ID) (*beans.Category, error)
	history     []CategoryRepositoryGetSingleForBudgetFuncCall
	mutex       sync.Mutex
}

// GetSingleForBudget delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCategoryRepository) GetSingleForBudget(v0 context.Context, v1 beans.ID, v2 beans.ID) (*beans.Category, error) {
	r0, r1 := m.GetSingleForBudgetFunc.nextHook()(v0, v1, v2)
	m.GetSingleForBudgetFunc.appendCall(CategoryRepositoryGetSingleForBudgetFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSingleForBudget
// method of the parent MockCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *CategoryRepositoryGetSingleForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID) (*beans.Category, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSingleForBudget method of the parent MockCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CategoryRepositoryGetSingleForBudgetFunc) PushHook(hook func(context.Context, beans.ID, beans.ID) (*beans.Category, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGetSingleForBudgetFunc) SetDefaultReturn(r0 *beans.Category, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGetSingleForBudgetFunc) PushReturn(r0 *beans.Category, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGetSingleForBudgetFunc) nextHook() func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGetSingleForBudgetFunc) appendCall(r0 CategoryRepositoryGetSingleForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CategoryRepositoryGetSingleForBudgetFuncCall objects describing the
// invocations of this function.
func (f *CategoryRepositoryGetSingleForBudgetFunc) History() []CategoryRepositoryGetSingleForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGetSingleForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGetSingleForBudgetFuncCall is an object that describes
// an invocation of method GetSingleForBudget on an instance of
// MockCategoryRepository.
type CategoryRepositoryGetSingleForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Category
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGetSingleForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGetSingleForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryRepositoryGroupExistsFunc describes the behavior when the
// GroupExists method of the parent MockCategoryRepository instance is
// invoked.
type CategoryRepositoryGroupExistsFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID) (bool, error)
	hooks       []func(context.Context, beans.ID, beans.ID) (bool, error)
	history     []CategoryRepositoryGroupExistsFuncCall
	mutex       sync.Mutex
}

// GroupExists delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryRepository) GroupExists(v0 context.Context, v1 beans.ID, v2 beans.ID) (bool, error) {
	r0, r1 := m.GroupExistsFunc.nextHook()(v0, v1, v2)
	m.GroupExistsFunc.appendCall(CategoryRepositoryGroupExistsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GroupExists method
// of the parent MockCategoryRepository instance is invoked and the hook
// queue is empty.
func (f *CategoryRepositoryGroupExistsFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GroupExists method of the parent MockCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryRepositoryGroupExistsFunc) PushHook(hook func(context.Context, beans.ID, beans.ID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGroupExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGroupExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID) (bool, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGroupExistsFunc) nextHook() func(context.Context, beans.ID, beans.ID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGroupExistsFunc) appendCall(r0 CategoryRepositoryGroupExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryGroupExistsFuncCall
// objects describing the invocations of this function.
func (f *CategoryRepositoryGroupExistsFunc) History() []CategoryRepositoryGroupExistsFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGroupExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGroupExistsFuncCall is an object that describes an
// invocation of method GroupExists on an instance of
// MockCategoryRepository.
type CategoryRepositoryGroupExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGroupExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGroupExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockCountable is a mock implementation of the Countable interface (from
// the package github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockCountable struct {
	// LengthFunc is an instance of a mock function object controlling the
	// behavior of the method Length.
	LengthFunc *CountableLengthFunc
}

// NewMockCountable creates a new mock of the Countable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() (r0 int) {
				return
			},
		},
	}
}

// NewStrictMockCountable creates a new mock of the Countable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockCountable.Length")
			},
		},
	}
}

// NewMockCountableFrom creates a new mock of the MockCountable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockCountableFrom(i beans.Countable) *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: i.Length,
		},
	}
}

// CountableLengthFunc describes the behavior when the Length method of the
// parent MockCountable instance is invoked.
type CountableLengthFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []CountableLengthFuncCall
	mutex       sync.Mutex
}

// Length delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCountable) Length() int {
	r0 := m.LengthFunc.nextHook()()
	m.LengthFunc.appendCall(CountableLengthFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Length method of the
// parent MockCountable instance is invoked and the hook queue is empty.
func (f *CountableLengthFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Length method of the parent MockCountable instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CountableLengthFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CountableLengthFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CountableLengthFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *CountableLengthFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CountableLengthFunc) appendCall(r0 CountableLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CountableLengthFuncCall objects describing
// the invocations of this function.
func (f *CountableLengthFunc) History() []CountableLengthFuncCall {
	f.mutex.Lock()
	history := make([]CountableLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CountableLengthFuncCall is an object that describes an invocation of
// method Length on an instance of MockCountable.
type CountableLengthFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CountableLengthFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CountableLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockEmptiable is a mock implementation of the Emptiable interface (from
// the package github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockEmptiable struct {
	// EmptyFunc is an instance of a mock function object controlling the
	// behavior of the method Empty.
	EmptyFunc *EmptiableEmptyFunc
}

// NewMockEmptiable creates a new mock of the Emptiable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
	}
}

// NewStrictMockEmptiable creates a new mock of the Emptiable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockEmptiable.Empty")
			},
		},
	}
}

// NewMockEmptiableFrom creates a new mock of the MockEmptiable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockEmptiableFrom(i beans.Emptiable) *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: i.Empty,
		},
	}
}

// EmptiableEmptyFunc describes the behavior when the Empty method of the
// parent MockEmptiable instance is invoked.
type EmptiableEmptyFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []EmptiableEmptyFuncCall
	mutex       sync.Mutex
}

// Empty delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEmptiable) Empty() bool {
	r0 := m.EmptyFunc.nextHook()()
	m.EmptyFunc.appendCall(EmptiableEmptyFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Empty method of the
// parent MockEmptiable instance is invoked and the hook queue is empty.
func (f *EmptiableEmptyFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Empty method of the parent MockEmptiable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *EmptiableEmptyFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EmptiableEmptyFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EmptiableEmptyFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *EmptiableEmptyFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EmptiableEmptyFunc) appendCall(r0 EmptiableEmptyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EmptiableEmptyFuncCall objects describing
// the invocations of this function.
func (f *EmptiableEmptyFunc) History() []EmptiableEmptyFuncCall {
	f.mutex.Lock()
	history := make([]EmptiableEmptyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EmptiableEmptyFuncCall is an object that describes an invocation of
// method Empty on an instance of MockEmptiable.
type EmptiableEmptyFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EmptiableEmptyFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EmptiableEmptyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockError is a mock implementation of the Error interface (from the
// package github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockError struct {
	// BeansErrorFunc is an instance of a mock function object controlling
	// the behavior of the method BeansError.
	BeansErrorFunc *ErrorBeansErrorFunc
	// ErrorFunc is an instance of a mock function object controlling the
	// behavior of the method Error.
	ErrorFunc *ErrorErrorFunc
}

// NewMockError creates a new mock of the Error interface. All methods
// return zero values for all results, unless overwritten.
func NewMockError() *MockError {
	return &MockError{
		BeansErrorFunc: &ErrorBeansErrorFunc{
			defaultHook: func() (r0 string, r1 string) {
				return
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
	}
}

// NewStrictMockError creates a new mock of the Error interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockError() *MockError {
	return &MockError{
		BeansErrorFunc: &ErrorBeansErrorFunc{
			defaultHook: func() (string, string) {
				panic("unexpected invocation of MockError.BeansError")
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockError.Error")
			},
		},
	}
}

// NewMockErrorFrom creates a new mock of the MockError interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockErrorFrom(i beans.Error) *MockError {
	return &MockError{
		BeansErrorFunc: &ErrorBeansErrorFunc{
			defaultHook: i.BeansError,
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: i.Error,
		},
	}
}

// ErrorBeansErrorFunc describes the behavior when the BeansError method of
// the parent MockError instance is invoked.
type ErrorBeansErrorFunc struct {
	defaultHook func() (string, string)
	hooks       []func() (string, string)
	history     []ErrorBeansErrorFuncCall
	mutex       sync.Mutex
}

// BeansError delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockError) BeansError() (string, string) {
	r0, r1 := m.BeansErrorFunc.nextHook()()
	m.BeansErrorFunc.appendCall(ErrorBeansErrorFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BeansError method of
// the parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorBeansErrorFunc) SetDefaultHook(hook func() (string, string)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BeansError method of the parent MockError instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ErrorBeansErrorFunc) PushHook(hook func() (string, string)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorBeansErrorFunc) SetDefaultReturn(r0 string, r1 string) {
	f.SetDefaultHook(func() (string, string) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorBeansErrorFunc) PushReturn(r0 string, r1 string) {
	f.PushHook(func() (string, string) {
		return r0, r1
	})
}

func (f *ErrorBeansErrorFunc) nextHook() func() (string, string) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorBeansErrorFunc) appendCall(r0 ErrorBeansErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorBeansErrorFuncCall objects describing
// the invocations of this function.
func (f *ErrorBeansErrorFunc) History() []ErrorBeansErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorBeansErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorBeansErrorFuncCall is an object that describes an invocation of
// method BeansError on an instance of MockError.
type ErrorBeansErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorBeansErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorBeansErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ErrorErrorFunc describes the behavior when the Error method of the parent
// MockError instance is invoked.
type ErrorErrorFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []ErrorErrorFuncCall
	mutex       sync.Mutex
}

// Error delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockError) Error() string {
	r0 := m.ErrorFunc.nextHook()()
	m.ErrorFunc.appendCall(ErrorErrorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Error method of the
// parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorErrorFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Error method of the parent MockError instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ErrorErrorFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorErrorFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorErrorFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *ErrorErrorFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorErrorFunc) appendCall(r0 ErrorErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorErrorFuncCall objects describing the
// invocations of this function.
func (f *ErrorErrorFunc) History() []ErrorErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorErrorFuncCall is an object that describes an invocation of method
// Error on an instance of MockError.
type ErrorErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockMonthCategoryRepository is a mock implementation of the
// MonthCategoryRepository interface (from the package
// github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockMonthCategoryRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *MonthCategoryRepositoryCreateFunc
	// GetAssignedInMonthFunc is an instance of a mock function object
	// controlling the behavior of the method GetAssignedInMonth.
	GetAssignedInMonthFunc *MonthCategoryRepositoryGetAssignedInMonthFunc
	// GetForMonthFunc is an instance of a mock function object controlling
	// the behavior of the method GetForMonth.
	GetForMonthFunc *MonthCategoryRepositoryGetForMonthFunc
	// GetOrCreateFunc is an instance of a mock function object controlling
	// the behavior of the method GetOrCreate.
	GetOrCreateFunc *MonthCategoryRepositoryGetOrCreateFunc
	// UpdateAmountFunc is an instance of a mock function object controlling
	// the behavior of the method UpdateAmount.
	UpdateAmountFunc *MonthCategoryRepositoryUpdateAmountFunc
}

// NewMockMonthCategoryRepository creates a new mock of the
// MonthCategoryRepository interface. All methods return zero values for all
// results, unless overwritten.
func NewMockMonthCategoryRepository() *MockMonthCategoryRepository {
	return &MockMonthCategoryRepository{
		CreateFunc: &MonthCategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.MonthCategory) (r0 error) {
				return
			},
		},
		GetAssignedInMonthFunc: &MonthCategoryRepositoryGetAssignedInMonthFunc{
			defaultHook: func(context.Context, beans.ID) (r0 beans.Amount, r1 error) {
				return
			},
		},
		GetForMonthFunc: &MonthCategoryRepositoryGetForMonthFunc{
			defaultHook: func(context.Context, *beans.Month) (r0 []*beans.MonthCategory, r1 error) {
				return
			},
		},
		GetOrCreateFunc: &MonthCategoryRepositoryGetOrCreateFunc{
			defaultHook: func(context.Context, beans.Tx, beans.ID, beans.ID) (r0 *beans.MonthCategory, r1 error) {
				return
			},
		},
		UpdateAmountFunc: &MonthCategoryRepositoryUpdateAmountFunc{
			defaultHook: func(context.Context, beans.ID, beans.Amount) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockMonthCategoryRepository creates a new mock of the
// MonthCategoryRepository interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockMonthCategoryRepository() *MockMonthCategoryRepository {
	return &MockMonthCategoryRepository{
		CreateFunc: &MonthCategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.MonthCategory) error {
				panic("unexpected invocation of MockMonthCategoryRepository.Create")
			},
		},
		GetAssignedInMonthFunc: &MonthCategoryRepositoryGetAssignedInMonthFunc{
			defaultHook: func(context.Context, beans.ID) (beans.Amount, error) {
				panic("unexpected invocation of MockMonthCategoryRepository.GetAssignedInMonth")
			},
		},
		GetForMonthFunc: &MonthCategoryRepositoryGetForMonthFunc{
			defaultHook: func(context.Context, *beans.Month) ([]*beans.MonthCategory, error) {
				panic("unexpected invocation of MockMonthCategoryRepository.GetForMonth")
			},
		},
		GetOrCreateFunc: &MonthCategoryRepositoryGetOrCreateFunc{
			defaultHook: func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error) {
				panic("unexpected invocation of MockMonthCategoryRepository.GetOrCreate")
			},
		},
		UpdateAmountFunc: &MonthCategoryRepositoryUpdateAmountFunc{
			defaultHook: func(context.Context, beans.ID, beans.Amount) error {
				panic("unexpected invocation of MockMonthCategoryRepository.UpdateAmount")
			},
		},
	}
}

// NewMockMonthCategoryRepositoryFrom creates a new mock of the
// MockMonthCategoryRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockMonthCategoryRepositoryFrom(i beans.MonthCategoryRepository) *MockMonthCategoryRepository {
	return &MockMonthCategoryRepository{
		CreateFunc: &MonthCategoryRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetAssignedInMonthFunc: &MonthCategoryRepositoryGetAssignedInMonthFunc{
			defaultHook: i.GetAssignedInMonth,
		},
		GetForMonthFunc: &MonthCategoryRepositoryGetForMonthFunc{
			defaultHook: i.GetForMonth,
		},
		GetOrCreateFunc: &MonthCategoryRepositoryGetOrCreateFunc{
			defaultHook: i.GetOrCreate,
		},
		UpdateAmountFunc: &MonthCategoryRepositoryUpdateAmountFunc{
			defaultHook: i.UpdateAmount,
		},
	}
}

// MonthCategoryRepositoryCreateFunc describes the behavior when the Create
// method of the parent MockMonthCategoryRepository instance is invoked.
type MonthCategoryRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.Tx, *beans.MonthCategory) error
	hooks       []func(context.Context, beans.Tx, *beans.MonthCategory) error
	history     []MonthCategoryRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) Create(v0 context.Context, v1 beans.Tx, v2 *beans.MonthCategory) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(MonthCategoryRepositoryCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockMonthCategoryRepository instance is invoked and the hook queue
// is empty.
func (f *MonthCategoryRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.Tx, *beans.MonthCategory) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockMonthCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *MonthCategoryRepositoryCreateFunc) PushHook(hook func(context.Context, beans.Tx, *beans.MonthCategory) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.Tx, *beans.MonthCategory) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.Tx, *beans.MonthCategory) error {
		return r0
	})
}

func (f *MonthCategoryRepositoryCreateFunc) nextHook() func(context.Context, beans.Tx, *beans.MonthCategory) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryCreateFunc) appendCall(r0 MonthCategoryRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryRepositoryCreateFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryRepositoryCreateFunc) History() []MonthCategoryRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryCreateFuncCall is an object that describes an
// invocation of method Create on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Tx
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *beans.MonthCategory
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MonthCategoryRepositoryGetAssignedInMonthFunc describes the behavior when
// the GetAssignedInMonth method of the parent MockMonthCategoryRepository
// instance is invoked.
type MonthCategoryRepositoryGetAssignedInMonthFunc struct {
	defaultHook func(context.Context, beans.ID) (beans.Amount, error)
	hooks       []func(context.Context, beans.ID) (beans.Amount, error)
	history     []MonthCategoryRepositoryGetAssignedInMonthFuncCall
	mutex       sync.Mutex
}

// GetAssignedInMonth delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) GetAssignedInMonth(v0 context.Context, v1 beans.ID) (beans.Amount, error) {
	r0, r1 := m.GetAssignedInMonthFunc.nextHook()(v0, v1)
	m.GetAssignedInMonthFunc.appendCall(MonthCategoryRepositoryGetAssignedInMonthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAssignedInMonth
// method of the parent MockMonthCategoryRepository instance is invoked and
// the hook queue is empty.
func (f *MonthCategoryRepositoryGetAssignedInMonthFunc) SetDefaultHook(hook func(context.Context, beans.ID) (beans.Amount, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAssignedInMonth method of the parent MockMonthCategoryRepository
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *MonthCategoryRepositoryGetAssignedInMonthFunc) PushHook(hook func(context.Context, beans.ID) (beans.Amount, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryGetAssignedInMonthFunc) SetDefaultReturn(r0 beans.Amount, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (beans.Amount, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryGetAssignedInMonthFunc) PushReturn(r0 beans.Amount, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (beans.Amount, error) {
		return r0, r1
	})
}

func (f *MonthCategoryRepositoryGetAssignedInMonthFunc) nextHook() func(context.Context, beans.ID) (beans.Amount, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryGetAssignedInMonthFunc) appendCall(r0 MonthCategoryRepositoryGetAssignedInMonthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// MonthCategoryRepositoryGetAssignedInMonthFuncCall objects describing the
// invocations of this function.
func (f *MonthCategoryRepositoryGetAssignedInMonthFunc) History() []MonthCategoryRepositoryGetAssignedInMonthFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryGetAssignedInMonthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryGetAssignedInMonthFuncCall is an object that
// describes an invocation of method GetAssignedInMonth on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryGetAssignedInMonthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 beans.Amount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryGetAssignedInMonthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryGetAssignedInMonthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthCategoryRepositoryGetForMonthFunc describes the behavior when the
// GetForMonth method of the parent MockMonthCategoryRepository instance is
// invoked.
type MonthCategoryRepositoryGetForMonthFunc struct {
	defaultHook func(context.Context, *beans.Month) ([]*beans.MonthCategory, error)
	hooks       []func(context.Context, *beans.Month) ([]*beans.MonthCategory, error)
	history     []MonthCategoryRepositoryGetForMonthFuncCall
	mutex       sync.Mutex
}

// GetForMonth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) GetForMonth(v0 context.Context, v1 *beans.Month) ([]*beans.MonthCategory, error) {
	r0, r1 := m.GetForMonthFunc.nextHook()(v0, v1)
	m.GetForMonthFunc.appendCall(MonthCategoryRepositoryGetForMonthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForMonth method
// of the parent MockMonthCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *MonthCategoryRepositoryGetForMonthFunc) SetDefaultHook(hook func(context.Context, *beans.Month) ([]*beans.MonthCategory, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForMonth method of the parent MockMonthCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *MonthCategoryRepositoryGetForMonthFunc) PushHook(hook func(context.Context, *beans.Month) ([]*beans.MonthCategory, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryGetForMonthFunc) SetDefaultReturn(r0 []*beans.MonthCategory, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.Month) ([]*beans.MonthCategory, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryGetForMonthFunc) PushReturn(r0 []*beans.MonthCategory, r1 error) {
	f.PushHook(func(context.Context, *beans.Month) ([]*beans.MonthCategory, error) {
		return r0, r1
	})
}

func (f *MonthCategoryRepositoryGetForMonthFunc) nextHook() func(context.Context, *beans.Month) ([]*beans.MonthCategory, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryGetForMonthFunc) appendCall(r0 MonthCategoryRepositoryGetForMonthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryRepositoryGetForMonthFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryRepositoryGetForMonthFunc) History() []MonthCategoryRepositoryGetForMonthFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryGetForMonthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryGetForMonthFuncCall is an object that describes an
// invocation of method GetForMonth on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryGetForMonthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Month
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.MonthCategory
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryGetForMonthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryGetForMonthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthCategoryRepositoryGetOrCreateFunc describes the behavior when the
// GetOrCreate method of the parent MockMonthCategoryRepository instance is
// invoked.
type MonthCategoryRepositoryGetOrCreateFunc struct {
	defaultHook func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error)
	hooks       []func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error)
	history     []MonthCategoryRepositoryGetOrCreateFuncCall
	mutex       sync.Mutex
}

// GetOrCreate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) GetOrCreate(v0 context.Context, v1 beans.Tx, v2 beans.ID, v3 beans.ID) (*beans.MonthCategory, error) {
	r0, r1 := m.GetOrCreateFunc.nextHook()(v0, v1, v2, v3)
	m.GetOrCreateFunc.appendCall(MonthCategoryRepositoryGetOrCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOrCreate method
// of the parent MockMonthCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *MonthCategoryRepositoryGetOrCreateFunc) SetDefaultHook(hook func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrCreate method of the parent MockMonthCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *MonthCategoryRepositoryGetOrCreateFunc) PushHook(hook func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryGetOrCreateFunc) SetDefaultReturn(r0 *beans.MonthCategory, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryGetOrCreateFunc) PushReturn(r0 *beans.MonthCategory, r1 error) {
	f.PushHook(func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error) {
		return r0, r1
	})
}

func (f *MonthCategoryRepositoryGetOrCreateFunc) nextHook() func(context.Context, beans.Tx, beans.ID, beans.ID) (*beans.MonthCategory, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryGetOrCreateFunc) appendCall(r0 MonthCategoryRepositoryGetOrCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryRepositoryGetOrCreateFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryRepositoryGetOrCreateFunc) History() []MonthCategoryRepositoryGetOrCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryGetOrCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryGetOrCreateFuncCall is an object that describes an
// invocation of method GetOrCreate on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryGetOrCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Tx
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.MonthCategory
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryGetOrCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryGetOrCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthCategoryRepositoryUpdateAmountFunc describes the behavior when the
// UpdateAmount method of the parent MockMonthCategoryRepository instance is
// invoked.
type MonthCategoryRepositoryUpdateAmountFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Amount) error
	hooks       []func(context.Context, beans.ID, beans.Amount) error
	history     []MonthCategoryRepositoryUpdateAmountFuncCall
	mutex       sync.Mutex
}

// UpdateAmount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) UpdateAmount(v0 context.Context, v1 beans.ID, v2 beans.Amount) error {
	r0 := m.UpdateAmountFunc.nextHook()(v0, v1, v2)
	m.UpdateAmountFunc.appendCall(MonthCategoryRepositoryUpdateAmountFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateAmount method
// of the parent MockMonthCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *MonthCategoryRepositoryUpdateAmountFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Amount) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateAmount method of the parent MockMonthCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *MonthCategoryRepositoryUpdateAmountFunc) PushHook(hook func(context.Context, beans.ID, beans.Amount) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryUpdateAmountFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Amount) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryUpdateAmountFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Amount) error {
		return r0
	})
}

func (f *MonthCategoryRepositoryUpdateAmountFunc) nextHook() func(context.Context, beans.ID, beans.Amount) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryUpdateAmountFunc) appendCall(r0 MonthCategoryRepositoryUpdateAmountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryRepositoryUpdateAmountFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryRepositoryUpdateAmountFunc) History() []MonthCategoryRepositoryUpdateAmountFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryUpdateAmountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryUpdateAmountFuncCall is an object that describes
// an invocation of method UpdateAmount on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryUpdateAmountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Amount
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryUpdateAmountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryUpdateAmountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockMonthContract is a mock implementation of the MonthContract interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockMonthContract struct {
	// GetOrCreateFunc is an instance of a mock function object controlling
	// the behavior of the method GetOrCreate.
	GetOrCreateFunc *MonthContractGetOrCreateFunc
	// SetCategoryAmountFunc is an instance of a mock function object
	// controlling the behavior of the method SetCategoryAmount.
	SetCategoryAmountFunc *MonthContractSetCategoryAmountFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *MonthContractUpdateFunc
}

// NewMockMonthContract creates a new mock of the MonthContract interface.
// All methods return zero values for all results, unless overwritten.
func NewMockMonthContract() *MockMonthContract {
	return &MockMonthContract{
		GetOrCreateFunc: &MonthContractGetOrCreateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (r0 *beans.Month, r1 []*beans.MonthCategory, r2 beans.Amount, r3 error) {
				return
			},
		},
		SetCategoryAmountFunc: &MonthContractSetCategoryAmountFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) (r0 error) {
				return
			},
		},
		UpdateFunc: &MonthContractUpdateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockMonthContract creates a new mock of the MonthContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockMonthContract() *MockMonthContract {
	return &MockMonthContract{
		GetOrCreateFunc: &MonthContractGetOrCreateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error) {
				panic("unexpected invocation of MockMonthContract.GetOrCreate")
			},
		},
		SetCategoryAmountFunc: &MonthContractSetCategoryAmountFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error {
				panic("unexpected invocation of MockMonthContract.SetCategoryAmount")
			},
		},
		UpdateFunc: &MonthContractUpdateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error {
				panic("unexpected invocation of MockMonthContract.Update")
			},
		},
	}
}

// NewMockMonthContractFrom creates a new mock of the MockMonthContract
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockMonthContractFrom(i beans.MonthContract) *MockMonthContract {
	return &MockMonthContract{
		GetOrCreateFunc: &MonthContractGetOrCreateFunc{
			defaultHook: i.GetOrCreate,
		},
		SetCategoryAmountFunc: &MonthContractSetCategoryAmountFunc{
			defaultHook: i.SetCategoryAmount,
		},
		UpdateFunc: &MonthContractUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// MonthContractGetOrCreateFunc describes the behavior when the GetOrCreate
// method of the parent MockMonthContract instance is invoked.
type MonthContractGetOrCreateFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error)
	history     []MonthContractGetOrCreateFuncCall
	mutex       sync.Mutex
}

// GetOrCreate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthContract) GetOrCreate(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error) {
	r0, r1, r2, r3 := m.GetOrCreateFunc.nextHook()(v0, v1, v2)
	m.GetOrCreateFunc.appendCall(MonthContractGetOrCreateFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetOrCreate method
// of the parent MockMonthContract instance is invoked and the hook queue is
// empty.
func (f *MonthContractGetOrCreateFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrCreate method of the parent MockMonthContract instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *MonthContractGetOrCreateFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthContractGetOrCreateFunc) SetDefaultReturn(r0 *beans.Month, r1 []*beans.MonthCategory, r2 beans.Amount, r3 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthContractGetOrCreateFunc) PushReturn(r0 *beans.Month, r1 []*beans.MonthCategory, r2 beans.Amount, r3 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error) {
		return r0, r1, r2, r3
	})
}

func (f *MonthContractGetOrCreateFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.MonthDate) (*beans.Month, []*beans.MonthCategory, beans.Amount, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthContractGetOrCreateFunc) appendCall(r0 MonthContractGetOrCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthContractGetOrCreateFuncCall objects
// describing the invocations of this function.
func (f *MonthContractGetOrCreateFunc) History() []MonthContractGetOrCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthContractGetOrCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthContractGetOrCreateFuncCall is an object that describes an
// invocation of method GetOrCreate on an instance of MockMonthContract.
type MonthContractGetOrCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.MonthDate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []*beans.MonthCategory
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 beans.Amount
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthContractGetOrCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthContractGetOrCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// MonthContractSetCategoryAmountFunc describes the behavior when the
// SetCategoryAmount method of the parent MockMonthContract instance is
// invoked.
type MonthContractSetCategoryAmountFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error
	history     []MonthContractSetCategoryAmountFuncCall
	mutex       sync.Mutex
}

// SetCategoryAmount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockMonthContract) SetCategoryAmount(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.ID, v3 beans.ID, v4 beans.Amount) error {
	r0 := m.SetCategoryAmountFunc.nextHook()(v0, v1, v2, v3, v4)
	m.SetCategoryAmountFunc.appendCall(MonthContractSetCategoryAmountFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetCategoryAmount
// method of the parent MockMonthContract instance is invoked and the hook
// queue is empty.
func (f *MonthContractSetCategoryAmountFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCategoryAmount method of the parent MockMonthContract instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *MonthContractSetCategoryAmountFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthContractSetCategoryAmountFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthContractSetCategoryAmountFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error {
		return r0
	})
}

func (f *MonthContractSetCategoryAmountFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.ID, beans.Amount) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthContractSetCategoryAmountFunc) appendCall(r0 MonthContractSetCategoryAmountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthContractSetCategoryAmountFuncCall
// objects describing the invocations of this function.
func (f *MonthContractSetCategoryAmountFunc) History() []MonthContractSetCategoryAmountFuncCall {
	f.mutex.Lock()
	history := make([]MonthContractSetCategoryAmountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthContractSetCategoryAmountFuncCall is an object that describes an
// invocation of method SetCategoryAmount on an instance of
// MockMonthContract.
type MonthContractSetCategoryAmountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.ID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 beans.Amount
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthContractSetCategoryAmountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthContractSetCategoryAmountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MonthContractUpdateFunc describes the behavior when the Update method of
// the parent MockMonthContract instance is invoked.
type MonthContractUpdateFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error
	history     []MonthContractUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthContract) Update(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.ID, v3 beans.Amount) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateFunc.appendCall(MonthContractUpdateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockMonthContract instance is invoked and the hook queue is empty.
func (f *MonthContractUpdateFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockMonthContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *MonthContractUpdateFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthContractUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthContractUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error {
		return r0
	})
}

func (f *MonthContractUpdateFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.ID, beans.Amount) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthContractUpdateFunc) appendCall(r0 MonthContractUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthContractUpdateFuncCall objects
// describing the invocations of this function.
func (f *MonthContractUpdateFunc) History() []MonthContractUpdateFuncCall {
	f.mutex.Lock()
	history := make([]MonthContractUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthContractUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockMonthContract.
type MonthContractUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.Amount
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthContractUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthContractUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockMonthRepository is a mock implementation of the MonthRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockMonthRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *MonthRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *MonthRepositoryGetFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *MonthRepositoryGetForBudgetFunc
	// GetOrCreateFunc is an instance of a mock function object controlling
	// the behavior of the method GetOrCreate.
	GetOrCreateFunc *MonthRepositoryGetOrCreateFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *MonthRepositoryUpdateFunc
}

// NewMockMonthRepository creates a new mock of the MonthRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockMonthRepository() *MockMonthRepository {
	return &MockMonthRepository{
		CreateFunc: &MonthRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.Month) (r0 error) {
				return
			},
		},
		GetFunc: &MonthRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Month, r1 error) {
				return
			},
		},
		GetForBudgetFunc: &MonthRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Month, r1 error) {
				return
			},
		},
		GetOrCreateFunc: &MonthRepositoryGetOrCreateFunc{
			defaultHook: func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (r0 *beans.Month, r1 error) {
				return
			},
		},
		UpdateFunc: &MonthRepositoryUpdateFunc{
			defaultHook: func(context.Context, *beans.Month) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockMonthRepository creates a new mock of the MonthRepository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockMonthRepository() *MockMonthRepository {
	return &MockMonthRepository{
		CreateFunc: &MonthRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.Tx, *beans.Month) error {
				panic("unexpected invocation of MockMonthRepository.Create")
			},
		},
		GetFunc: &MonthRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Month, error) {
				panic("unexpected invocation of MockMonthRepository.Get")
			},
		},
		GetForBudgetFunc: &MonthRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Month, error) {
				panic("unexpected invocation of MockMonthRepository.GetForBudget")
			},
		},
		GetOrCreateFunc: &MonthRepositoryGetOrCreateFunc{
			defaultHook: func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error) {
				panic("unexpected invocation of MockMonthRepository.GetOrCreate")
			},
		},
		UpdateFunc: &MonthRepositoryUpdateFunc{
			defaultHook: func(context.Context, *beans.Month) error {
				panic("unexpected invocation of MockMonthRepository.Update")
			},
		},
	}
}

// NewMockMonthRepositoryFrom creates a new mock of the MockMonthRepository
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockMonthRepositoryFrom(i beans.MonthRepository) *MockMonthRepository {
	return &MockMonthRepository{
		CreateFunc: &MonthRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &MonthRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetForBudgetFunc: &MonthRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
		GetOrCreateFunc: &MonthRepositoryGetOrCreateFunc{
			defaultHook: i.GetOrCreate,
		},
		UpdateFunc: &MonthRepositoryUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// MonthRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockMonthRepository instance is invoked.
type MonthRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.Tx, *beans.Month) error
	hooks       []func(context.Context, beans.Tx, *beans.Month) error
	history     []MonthRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthRepository) Create(v0 context.Context, v1 beans.Tx, v2 *beans.Month) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(MonthRepositoryCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockMonthRepository instance is invoked and the hook queue is
// empty.
func (f *MonthRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.Tx, *beans.Month) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockMonthRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *MonthRepositoryCreateFunc) PushHook(hook func(context.Context, beans.Tx, *beans.Month) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.Tx, *beans.Month) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.Tx, *beans.Month) error {
		return r0
	})
}

func (f *MonthRepositoryCreateFunc) nextHook() func(context.Context, beans.Tx, *beans.Month) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryCreateFunc) appendCall(r0 MonthRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryCreateFunc) History() []MonthRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockMonthRepository.
type MonthRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Tx
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *beans.Month
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MonthRepositoryGetFunc describes the behavior when the Get method of the
// parent MockMonthRepository instance is invoked.
type MonthRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Month, error)
	hooks       []func(context.Context, beans.ID) (*beans.Month, error)
	history     []MonthRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthRepository) Get(v0 context.Context, v1 beans.ID) (*beans.Month, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(MonthRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockMonthRepository instance is invoked and the hook queue is
// empty.
func (f *MonthRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockMonthRepository instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *MonthRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryGetFunc) SetDefaultReturn(r0 *beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryGetFunc) PushReturn(r0 *beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryGetFunc) appendCall(r0 MonthRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryGetFunc) History() []MonthRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockMonthRepository.
type MonthRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockMonthRepository instance is
// invoked.
type MonthRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Month, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Month, error)
	history     []MonthRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Month, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(MonthRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockMonthRepository instance is invoked and the hook queue
// is empty.
func (f *MonthRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockMonthRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *MonthRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryGetForBudgetFunc) appendCall(r0 MonthRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryGetForBudgetFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryGetForBudgetFunc) History() []MonthRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of MockMonthRepository.
type MonthRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthRepositoryGetOrCreateFunc describes the behavior when the
// GetOrCreate method of the parent MockMonthRepository instance is invoked.
type MonthRepositoryGetOrCreateFunc struct {
	defaultHook func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error)
	hooks       []func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error)
	history     []MonthRepositoryGetOrCreateFuncCall
	mutex       sync.Mutex
}

// GetOrCreate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthRepository) GetOrCreate(v0 context.Context, v1 beans.Tx, v2 beans.ID, v3 beans.MonthDate) (*beans.Month, error) {
	r0, r1 := m.GetOrCreateFunc.nextHook()(v0, v1, v2, v3)
	m.GetOrCreateFunc.appendCall(MonthRepositoryGetOrCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOrCreate method
// of the parent MockMonthRepository instance is invoked and the hook queue
// is empty.
func (f *MonthRepositoryGetOrCreateFunc) SetDefaultHook(hook func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrCreate method of the parent MockMonthRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *MonthRepositoryGetOrCreateFunc) PushHook(hook func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryGetOrCreateFunc) SetDefaultReturn(r0 *beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryGetOrCreateFunc) PushReturn(r0 *beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthRepositoryGetOrCreateFunc) nextHook() func(context.Context, beans.Tx, beans.ID, beans.MonthDate) (*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryGetOrCreateFunc) appendCall(r0 MonthRepositoryGetOrCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryGetOrCreateFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryGetOrCreateFunc) History() []MonthRepositoryGetOrCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryGetOrCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryGetOrCreateFuncCall is an object that describes an
// invocation of method GetOrCreate on an instance of MockMonthRepository.
type MonthRepositoryGetOrCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Tx
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.MonthDate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryGetOrCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryGetOrCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthRepositoryUpdateFunc describes the behavior when the Update method
// of the parent MockMonthRepository instance is invoked.
type MonthRepositoryUpdateFunc struct {
	defaultHook func(context.Context, *beans.Month) error
	hooks       []func(context.Context, *beans.Month) error
	history     []MonthRepositoryUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthRepository) Update(v0 context.Context, v1 *beans.Month) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(MonthRepositoryUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockMonthRepository instance is invoked and the hook queue is
// empty.
func (f *MonthRepositoryUpdateFunc) SetDefaultHook(hook func(context.Context, *beans.Month) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockMonthRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *MonthRepositoryUpdateFunc) PushHook(hook func(context.Context, *beans.Month) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.Month) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.Month) error {
		return r0
	})
}

func (f *MonthRepositoryUpdateFunc) nextHook() func(context.Context, *beans.Month) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryUpdateFunc) appendCall(r0 MonthRepositoryUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryUpdateFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryUpdateFunc) History() []MonthRepositoryUpdateFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockMonthRepository.
type MonthRepositoryUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Month
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockPayeeContract is a mock implementation of the PayeeContract interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockPayeeContract struct {
	// CreatePayeeFunc is an instance of a mock function object controlling
	// the behavior of the method CreatePayee.
	CreatePayeeFunc *PayeeContractCreatePayeeFunc
	// GetAllFunc is an instance of a mock function object controlling the
	// behavior of the method GetAll.
	GetAllFunc *PayeeContractGetAllFunc
}

// NewMockPayeeContract creates a new mock of the PayeeContract interface.
// All methods return zero values for all results, unless overwritten.
func NewMockPayeeContract() *MockPayeeContract {
	return &MockPayeeContract{
		CreatePayeeFunc: &PayeeContractCreatePayeeFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.Name) (r0 *beans.Payee, r1 error) {
				return
			},
		},
		GetAllFunc: &PayeeContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) (r0 []*beans.Payee, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockPayeeContract creates a new mock of the PayeeContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPayeeContract() *MockPayeeContract {
	return &MockPayeeContract{
		CreatePayeeFunc: &PayeeContractCreatePayeeFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error) {
				panic("unexpected invocation of MockPayeeContract.CreatePayee")
			},
		},
		GetAllFunc: &PayeeContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error) {
				panic("unexpected invocation of MockPayeeContract.GetAll")
			},
		},
	}
}

// NewMockPayeeContractFrom creates a new mock of the MockPayeeContract
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockPayeeContractFrom(i beans.PayeeContract) *MockPayeeContract {
	return &MockPayeeContract{
		CreatePayeeFunc: &PayeeContractCreatePayeeFunc{
			defaultHook: i.CreatePayee,
		},
		GetAllFunc: &PayeeContractGetAllFunc{
			defaultHook: i.GetAll,
		},
	}
}

// PayeeContractCreatePayeeFunc describes the behavior when the CreatePayee
// method of the parent MockPayeeContract instance is invoked.
type PayeeContractCreatePayeeFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error)
	history     []PayeeContractCreatePayeeFuncCall
	mutex       sync.Mutex
}

// CreatePayee delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockPayeeContract) CreatePayee(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.Name) (*beans.Payee, error) {
	r0, r1 := m.CreatePayeeFunc.nextHook()(v0, v1, v2)
	m.CreatePayeeFunc.appendCall(PayeeContractCreatePayeeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreatePayee method
// of the parent MockPayeeContract instance is invoked and the hook queue is
// empty.
func (f *PayeeContractCreatePayeeFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePayee method of the parent MockPayeeContract instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PayeeContractCreatePayeeFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PayeeContractCreatePayeeFunc) SetDefaultReturn(r0 *beans.Payee, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PayeeContractCreatePayeeFunc) PushReturn(r0 *beans.Payee, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error) {
		return r0, r1
	})
}

func (f *PayeeContractCreatePayeeFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.Name) (*beans.Payee, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PayeeContractCreatePayeeFunc) appendCall(r0 PayeeContractCreatePayeeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PayeeContractCreatePayeeFuncCall objects
// describing the invocations of this function.
func (f *PayeeContractCreatePayeeFunc) History() []PayeeContractCreatePayeeFuncCall {
	f.mutex.Lock()
	history := make([]PayeeContractCreatePayeeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PayeeContractCreatePayeeFuncCall is an object that describes an
// invocation of method CreatePayee on an instance of MockPayeeContract.
type PayeeContractCreatePayeeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Payee
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PayeeContractCreatePayeeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PayeeContractCreatePayeeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PayeeContractGetAllFunc describes the behavior when the GetAll method of
// the parent MockPayeeContract instance is invoked.
type PayeeContractGetAllFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error)
	history     []PayeeContractGetAllFuncCall
	mutex       sync.Mutex
}

// GetAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPayeeContract) GetAll(v0 context.Context, v1 *beans.BudgetAuthContext) ([]*beans.Payee, error) {
	r0, r1 := m.GetAllFunc.nextHook()(v0, v1)
	m.GetAllFunc.appendCall(PayeeContractGetAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAll method of the
// parent MockPayeeContract instance is invoked and the hook queue is empty.
func (f *PayeeContractGetAllFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAll method of the parent MockPayeeContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PayeeContractGetAllFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PayeeContractGetAllFunc) SetDefaultReturn(r0 []*beans.Payee, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PayeeContractGetAllFunc) PushReturn(r0 []*beans.Payee, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error) {
		return r0, r1
	})
}

func (f *PayeeContractGetAllFunc) nextHook() func(context.Context, *beans.BudgetAuthContext) ([]*beans.Payee, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PayeeContractGetAllFunc) appendCall(r0 PayeeContractGetAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PayeeContractGetAllFuncCall objects
// describing the invocations of this function.
func (f *PayeeContractGetAllFunc) History() []PayeeContractGetAllFuncCall {
	f.mutex.Lock()
	history := make([]PayeeContractGetAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PayeeContractGetAllFuncCall is an object that describes an invocation of
// method GetAll on an instance of MockPayeeContract.
type PayeeContractGetAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Payee
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PayeeContractGetAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PayeeContractGetAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockPayeeRepository is a mock implementation of the PayeeRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockPayeeRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *PayeeRepositoryCreateFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *PayeeRepositoryGetForBudgetFunc
}

// NewMockPayeeRepository creates a new mock of the PayeeRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockPayeeRepository() *MockPayeeRepository {
	return &MockPayeeRepository{
		CreateFunc: &PayeeRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Payee) (r0 error) {
				return
			},
		},
		GetForBudgetFunc: &PayeeRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Payee, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockPayeeRepository creates a new mock of the PayeeRepository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPayeeRepository() *MockPayeeRepository {
	return &MockPayeeRepository{
		CreateFunc: &PayeeRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Payee) error {
				panic("unexpected invocation of MockPayeeRepository.Create")
			},
		},
		GetForBudgetFunc: &PayeeRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Payee, error) {
				panic("unexpected invocation of MockPayeeRepository.GetForBudget")
			},
		},
	}
}

// NewMockPayeeRepositoryFrom creates a new mock of the MockPayeeRepository
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockPayeeRepositoryFrom(i beans.PayeeRepository) *MockPayeeRepository {
	return &MockPayeeRepository{
		CreateFunc: &PayeeRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetForBudgetFunc: &PayeeRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
	}
}

// PayeeRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockPayeeRepository instance is invoked.
type PayeeRepositoryCreateFunc struct {
	defaultHook func(context.Context, *beans.Payee) error
	hooks       []func(context.Context, *beans.Payee) error
	history     []PayeeRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPayeeRepository) Create(v0 context.Context, v1 *beans.Payee) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(PayeeRepositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockPayeeRepository instance is invoked and the hook queue is
// empty.
func (f *PayeeRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, *beans.Payee) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockPayeeRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PayeeRepositoryCreateFunc) PushHook(hook func(context.Context, *beans.Payee) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PayeeRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.Payee) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PayeeRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.Payee) error {
		return r0
	})
}

func (f *PayeeRepositoryCreateFunc) nextHook() func(context.Context, *beans.Payee) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PayeeRepositoryCreateFunc) appendCall(r0 PayeeRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PayeeRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *PayeeRepositoryCreateFunc) History() []PayeeRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]PayeeRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PayeeRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockPayeeRepository.
type PayeeRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Payee
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PayeeRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PayeeRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PayeeRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockPayeeRepository instance is
// invoked.
type PayeeRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Payee, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Payee, error)
	history     []PayeeRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockPayeeRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Payee, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(PayeeRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockPayeeRepository instance is invoked and the hook queue
// is empty.
func (f *PayeeRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Payee, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockPayeeRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PayeeRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Payee, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PayeeRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Payee, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Payee, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PayeeRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Payee, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Payee, error) {
		return r0, r1
	})
}

func (f *PayeeRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Payee, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PayeeRepositoryGetForBudgetFunc) appendCall(r0 PayeeRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PayeeRepositoryGetForBudgetFuncCall objects
// describing the invocations of this function.
func (f *PayeeRepositoryGetForBudgetFunc) History() []PayeeRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]PayeeRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PayeeRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of MockPayeeRepository.
type PayeeRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Payee
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PayeeRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PayeeRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSessionRepository is a mock implementation of the SessionRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockSessionRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *SessionRepositoryCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *SessionRepositoryDeleteFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *SessionRepositoryGetFunc
}

// NewMockSessionRepository creates a new mock of the SessionRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSessionRepository() *MockSessionRepository {
	return &MockSessionRepository{
		CreateFunc: &SessionRepositoryCreateFunc{
			defaultHook: func(beans.ID) (r0 *beans.Session, r1 error) {
				return
			},
		},
		DeleteFunc: &SessionRepositoryDeleteFunc{
			defaultHook: func(beans.SessionID) (r0 error) {
				return
			},
		},
		GetFunc: &SessionRepositoryGetFunc{
			defaultHook: func(beans.SessionID) (r0 *beans.Session, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSessionRepository creates a new mock of the
// SessionRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSessionRepository() *MockSessionRepository {
	return &MockSessionRepository{
		CreateFunc: &SessionRepositoryCreateFunc{
			defaultHook: func(beans.ID) (*beans.Session, error) {
				panic("unexpected invocation of MockSessionRepository.Create")
			},
		},
		DeleteFunc: &SessionRepositoryDeleteFunc{
			defaultHook: func(beans.SessionID) error {
				panic("unexpected invocation of MockSessionRepository.Delete")
			},
		},
		GetFunc: &SessionRepositoryGetFunc{
			defaultHook: func(beans.SessionID) (*beans.Session, error) {
				panic("unexpected invocation of MockSessionRepository.Get")
			},
		},
	}
}

// NewMockSessionRepositoryFrom creates a new mock of the
// MockSessionRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSessionRepositoryFrom(i beans.SessionRepository) *MockSessionRepository {
	return &MockSessionRepository{
		CreateFunc: &SessionRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &SessionRepositoryDeleteFunc{
			defaultHook: i.Delete,
		},
		GetFunc: &SessionRepositoryGetFunc{
			defaultHook: i.Get,
		},
	}
}

// SessionRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockSessionRepository instance is invoked.
type SessionRepositoryCreateFunc struct {
	defaultHook func(beans.ID) (*beans.Session, error)
	hooks       []func(beans.ID) (*beans.Session, error)
	history     []SessionRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSessionRepository) Create(v0 beans.ID) (*beans.Session, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0)
	m.CreateFunc.appendCall(SessionRepositoryCreateFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockSessionRepository instance is invoked and the hook queue is
// empty.
func (f *SessionRepositoryCreateFunc) SetDefaultHook(hook func(beans.ID) (*beans.Session, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockSessionRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SessionRepositoryCreateFunc) PushHook(hook func(beans.ID) (*beans.Session, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SessionRepositoryCreateFunc) SetDefaultReturn(r0 *beans.Session, r1 error) {
	f.SetDefaultHook(func(beans.ID) (*beans.Session, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SessionRepositoryCreateFunc) PushReturn(r0 *beans.Session, r1 error) {
	f.PushHook(func(beans.ID) (*beans.Session, error) {
		return r0, r1
	})
}

func (f *SessionRepositoryCreateFunc) nextHook() func(beans.ID) (*beans.Session, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SessionRepositoryCreateFunc) appendCall(r0 SessionRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SessionRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *SessionRepositoryCreateFunc) History() []SessionRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]SessionRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SessionRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockSessionRepository.
type SessionRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Session
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SessionRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SessionRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SessionRepositoryDeleteFunc describes the behavior when the Delete method
// of the parent MockSessionRepository instance is invoked.
type SessionRepositoryDeleteFunc struct {
	defaultHook func(beans.SessionID) error
	hooks       []func(beans.SessionID) error
	history     []SessionRepositoryDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSessionRepository) Delete(v0 beans.SessionID) error {
	r0 := m.DeleteFunc.nextHook()(v0)
	m.DeleteFunc.appendCall(SessionRepositoryDeleteFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockSessionRepository instance is invoked and the hook queue is
// empty.
func (f *SessionRepositoryDeleteFunc) SetDefaultHook(hook func(beans.SessionID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockSessionRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SessionRepositoryDeleteFunc) PushHook(hook func(beans.SessionID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SessionRepositoryDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(beans.SessionID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SessionRepositoryDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(beans.SessionID) error {
		return r0
	})
}

func (f *SessionRepositoryDeleteFunc) nextHook() func(beans.SessionID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SessionRepositoryDeleteFunc) appendCall(r0 SessionRepositoryDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SessionRepositoryDeleteFuncCall objects
// describing the invocations of this function.
func (f *SessionRepositoryDeleteFunc) History() []SessionRepositoryDeleteFuncCall {
	f.mutex.Lock()
	history := make([]SessionRepositoryDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SessionRepositoryDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockSessionRepository.
type SessionRepositoryDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 beans.SessionID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SessionRepositoryDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SessionRepositoryDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SessionRepositoryGetFunc describes the behavior when the Get method of
// the parent MockSessionRepository instance is invoked.
type SessionRepositoryGetFunc struct {
	defaultHook func(beans.SessionID) (*beans.Session, error)
	hooks       []func(beans.SessionID) (*beans.Session, error)
	history     []SessionRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSessionRepository) Get(v0 beans.SessionID) (*beans.Session, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(SessionRepositoryGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockSessionRepository instance is invoked and the hook queue is
// empty.
func (f *SessionRepositoryGetFunc) SetDefaultHook(hook func(beans.SessionID) (*beans.Session, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockSessionRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SessionRepositoryGetFunc) PushHook(hook func(beans.SessionID) (*beans.Session, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SessionRepositoryGetFunc) SetDefaultReturn(r0 *beans.Session, r1 error) {
	f.SetDefaultHook(func(beans.SessionID) (*beans.Session, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SessionRepositoryGetFunc) PushReturn(r0 *beans.Session, r1 error) {
	f.PushHook(func(beans.SessionID) (*beans.Session, error) {
		return r0, r1
	})
}

func (f *SessionRepositoryGetFunc) nextHook() func(beans.SessionID) (*beans.Session, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SessionRepositoryGetFunc) appendCall(r0 SessionRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SessionRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *SessionRepositoryGetFunc) History() []SessionRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]SessionRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SessionRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockSessionRepository.
type SessionRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 beans.SessionID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Session
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SessionRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SessionRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockTransactionContract is a mock implementation of the
// TransactionContract interface (from the package
// github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockTransactionContract struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *TransactionContractCreateFunc
	// GetAllFunc is an instance of a mock function object controlling the
	// behavior of the method GetAll.
	GetAllFunc *TransactionContractGetAllFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *TransactionContractUpdateFunc
}

// NewMockTransactionContract creates a new mock of the TransactionContract
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockTransactionContract() *MockTransactionContract {
	return &MockTransactionContract{
		CreateFunc: &TransactionContractCreateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (r0 *beans.Transaction, r1 error) {
				return
			},
		},
		GetAllFunc: &TransactionContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) (r0 []*beans.Transaction, r1 error) {
				return
			},
		},
		UpdateFunc: &TransactionContractUpdateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockTransactionContract creates a new mock of the
// TransactionContract interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockTransactionContract() *MockTransactionContract {
	return &MockTransactionContract{
		CreateFunc: &TransactionContractCreateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error) {
				panic("unexpected invocation of MockTransactionContract.Create")
			},
		},
		GetAllFunc: &TransactionContractGetAllFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error) {
				panic("unexpected invocation of MockTransactionContract.GetAll")
			},
		},
		UpdateFunc: &TransactionContractUpdateFunc{
			defaultHook: func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error {
				panic("unexpected invocation of MockTransactionContract.Update")
			},
		},
	}
}

// NewMockTransactionContractFrom creates a new mock of the
// MockTransactionContract interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockTransactionContractFrom(i beans.TransactionContract) *MockTransactionContract {
	return &MockTransactionContract{
		CreateFunc: &TransactionContractCreateFunc{
			defaultHook: i.Create,
		},
		GetAllFunc: &TransactionContractGetAllFunc{
			defaultHook: i.GetAll,
		},
		UpdateFunc: &TransactionContractUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// TransactionContractCreateFunc describes the behavior when the Create
// method of the parent MockTransactionContract instance is invoked.
type TransactionContractCreateFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error)
	history     []TransactionContractCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionContract) Create(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.TransactionCreateParams) (*beans.Transaction, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(TransactionContractCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockTransactionContract instance is invoked and the hook queue is
// empty.
func (f *TransactionContractCreateFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockTransactionContract instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TransactionContractCreateFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionContractCreateFunc) SetDefaultReturn(r0 *beans.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionContractCreateFunc) PushReturn(r0 *beans.Transaction, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error) {
		return r0, r1
	})
}

func (f *TransactionContractCreateFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.TransactionCreateParams) (*beans.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionContractCreateFunc) appendCall(r0 TransactionContractCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionContractCreateFuncCall objects
// describing the invocations of this function.
func (f *TransactionContractCreateFunc) History() []TransactionContractCreateFuncCall {
	f.mutex.Lock()
	history := make([]TransactionContractCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionContractCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockTransactionContract.
type TransactionContractCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.TransactionCreateParams
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionContractCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionContractCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TransactionContractGetAllFunc describes the behavior when the GetAll
// method of the parent MockTransactionContract instance is invoked.
type TransactionContractGetAllFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error)
	hooks       []func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error)
	history     []TransactionContractGetAllFuncCall
	mutex       sync.Mutex
}

// GetAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionContract) GetAll(v0 context.Context, v1 *beans.BudgetAuthContext) ([]*beans.Transaction, error) {
	r0, r1 := m.GetAllFunc.nextHook()(v0, v1)
	m.GetAllFunc.appendCall(TransactionContractGetAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAll method of the
// parent MockTransactionContract instance is invoked and the hook queue is
// empty.
func (f *TransactionContractGetAllFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAll method of the parent MockTransactionContract instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TransactionContractGetAllFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionContractGetAllFunc) SetDefaultReturn(r0 []*beans.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionContractGetAllFunc) PushReturn(r0 []*beans.Transaction, r1 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error) {
		return r0, r1
	})
}

func (f *TransactionContractGetAllFunc) nextHook() func(context.Context, *beans.BudgetAuthContext) ([]*beans.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionContractGetAllFunc) appendCall(r0 TransactionContractGetAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionContractGetAllFuncCall objects
// describing the invocations of this function.
func (f *TransactionContractGetAllFunc) History() []TransactionContractGetAllFuncCall {
	f.mutex.Lock()
	history := make([]TransactionContractGetAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionContractGetAllFuncCall is an object that describes an
// invocation of method GetAll on an instance of MockTransactionContract.
type TransactionContractGetAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionContractGetAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionContractGetAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TransactionContractUpdateFunc describes the behavior when the Update
// method of the parent MockTransactionContract instance is invoked.
type TransactionContractUpdateFunc struct {
	defaultHook func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error
	hooks       []func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error
	history     []TransactionContractUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionContract) Update(v0 context.Context, v1 *beans.BudgetAuthContext, v2 beans.TransactionUpdateParams) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(TransactionContractUpdateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockTransactionContract instance is invoked and the hook queue is
// empty.
func (f *TransactionContractUpdateFunc) SetDefaultHook(hook func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockTransactionContract instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TransactionContractUpdateFunc) PushHook(hook func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionContractUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionContractUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error {
		return r0
	})
}

func (f *TransactionContractUpdateFunc) nextHook() func(context.Context, *beans.BudgetAuthContext, beans.TransactionUpdateParams) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionContractUpdateFunc) appendCall(r0 TransactionContractUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionContractUpdateFuncCall objects
// describing the invocations of this function.
func (f *TransactionContractUpdateFunc) History() []TransactionContractUpdateFuncCall {
	f.mutex.Lock()
	history := make([]TransactionContractUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionContractUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockTransactionContract.
type TransactionContractUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.BudgetAuthContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.TransactionUpdateParams
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionContractUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionContractUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockTransactionRepository is a mock implementation of the
// TransactionRepository interface (from the package
// github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockTransactionRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *TransactionRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *TransactionRepositoryGetFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *TransactionRepositoryGetForBudgetFunc
	// GetIncomeBetweenFunc is an instance of a mock function object
	// controlling the behavior of the method GetIncomeBetween.
	GetIncomeBetweenFunc *TransactionRepositoryGetIncomeBetweenFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *TransactionRepositoryUpdateFunc
}

// NewMockTransactionRepository creates a new mock of the
// TransactionRepository interface. All methods return zero values for all
// results, unless overwritten.
func NewMockTransactionRepository() *MockTransactionRepository {
	return &MockTransactionRepository{
		CreateFunc: &TransactionRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Transaction) (r0 error) {
				return
			},
		},
		GetFunc: &TransactionRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Transaction, r1 error) {
				return
			},
		},
		GetForBudgetFunc: &TransactionRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Transaction, r1 error) {
				return
			},
		},
		GetIncomeBetweenFunc: &TransactionRepositoryGetIncomeBetweenFunc{
			defaultHook: func(context.Context, beans.ID, beans.Date, beans.Date) (r0 beans.Amount, r1 error) {
				return
			},
		},
		UpdateFunc: &TransactionRepositoryUpdateFunc{
			defaultHook: func(context.Context, *beans.Transaction) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockTransactionRepository creates a new mock of the
// TransactionRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockTransactionRepository() *MockTransactionRepository {
	return &MockTransactionRepository{
		CreateFunc: &TransactionRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Transaction) error {
				panic("unexpected invocation of MockTransactionRepository.Create")
			},
		},
		GetFunc: &TransactionRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Transaction, error) {
				panic("unexpected invocation of MockTransactionRepository.Get")
			},
		},
		GetForBudgetFunc: &TransactionRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Transaction, error) {
				panic("unexpected invocation of MockTransactionRepository.GetForBudget")
			},
		},
		GetIncomeBetweenFunc: &TransactionRepositoryGetIncomeBetweenFunc{
			defaultHook: func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error) {
				panic("unexpected invocation of MockTransactionRepository.GetIncomeBetween")
			},
		},
		UpdateFunc: &TransactionRepositoryUpdateFunc{
			defaultHook: func(context.Context, *beans.Transaction) error {
				panic("unexpected invocation of MockTransactionRepository.Update")
			},
		},
	}
}

// NewMockTransactionRepositoryFrom creates a new mock of the
// MockTransactionRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockTransactionRepositoryFrom(i beans.TransactionRepository) *MockTransactionRepository {
	return &MockTransactionRepository{
		CreateFunc: &TransactionRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &TransactionRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetForBudgetFunc: &TransactionRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
		GetIncomeBetweenFunc: &TransactionRepositoryGetIncomeBetweenFunc{
			defaultHook: i.GetIncomeBetween,
		},
		UpdateFunc: &TransactionRepositoryUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// TransactionRepositoryCreateFunc describes the behavior when the Create
// method of the parent MockTransactionRepository instance is invoked.
type TransactionRepositoryCreateFunc struct {
	defaultHook func(context.Context, *beans.Transaction) error
	hooks       []func(context.Context, *beans.Transaction) error
	history     []TransactionRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionRepository) Create(v0 context.Context, v1 *beans.Transaction) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(TransactionRepositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockTransactionRepository instance is invoked and the hook queue
// is empty.
func (f *TransactionRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, *beans.Transaction) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockTransactionRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TransactionRepositoryCreateFunc) PushHook(hook func(context.Context, *beans.Transaction) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.Transaction) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.Transaction) error {
		return r0
	})
}

func (f *TransactionRepositoryCreateFunc) nextHook() func(context.Context, *beans.Transaction) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionRepositoryCreateFunc) appendCall(r0 TransactionRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *TransactionRepositoryCreateFunc) History() []TransactionRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]TransactionRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionRepositoryCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockTransactionRepository.
type TransactionRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TransactionRepositoryGetFunc describes the behavior when the Get method
// of the parent MockTransactionRepository instance is invoked.
type TransactionRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Transaction, error)
	hooks       []func(context.Context, beans.ID) (*beans.Transaction, error)
	history     []TransactionRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionRepository) Get(v0 context.Context, v1 beans.ID) (*beans.Transaction, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(TransactionRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockTransactionRepository instance is invoked and the hook queue
// is empty.
func (f *TransactionRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockTransactionRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TransactionRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionRepositoryGetFunc) SetDefaultReturn(r0 *beans.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionRepositoryGetFunc) PushReturn(r0 *beans.Transaction, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Transaction, error) {
		return r0, r1
	})
}

func (f *TransactionRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionRepositoryGetFunc) appendCall(r0 TransactionRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *TransactionRepositoryGetFunc) History() []TransactionRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]TransactionRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionRepositoryGetFuncCall is an object that describes an
// invocation of method Get on an instance of MockTransactionRepository.
type TransactionRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TransactionRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockTransactionRepository instance is
// invoked.
type TransactionRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Transaction, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Transaction, error)
	history     []TransactionRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTransactionRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Transaction, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(TransactionRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockTransactionRepository instance is invoked and the hook
// queue is empty.
func (f *TransactionRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockTransactionRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *TransactionRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Transaction, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Transaction, error) {
		return r0, r1
	})
}

func (f *TransactionRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionRepositoryGetForBudgetFunc) appendCall(r0 TransactionRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionRepositoryGetForBudgetFuncCall
// objects describing the invocations of this function.
func (f *TransactionRepositoryGetForBudgetFunc) History() []TransactionRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]TransactionRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of
// MockTransactionRepository.
type TransactionRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TransactionRepositoryGetIncomeBetweenFunc describes the behavior when the
// GetIncomeBetween method of the parent MockTransactionRepository instance
// is invoked.
type TransactionRepositoryGetIncomeBetweenFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error)
	hooks       []func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error)
	history     []TransactionRepositoryGetIncomeBetweenFuncCall
	mutex       sync.Mutex
}

// GetIncomeBetween delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTransactionRepository) GetIncomeBetween(v0 context.Context, v1 beans.ID, v2 beans.Date, v3 beans.Date) (beans.Amount, error) {
	r0, r1 := m.GetIncomeBetweenFunc.nextHook()(v0, v1, v2, v3)
	m.GetIncomeBetweenFunc.appendCall(TransactionRepositoryGetIncomeBetweenFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIncomeBetween
// method of the parent MockTransactionRepository instance is invoked and
// the hook queue is empty.
func (f *TransactionRepositoryGetIncomeBetweenFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIncomeBetween method of the parent MockTransactionRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *TransactionRepositoryGetIncomeBetweenFunc) PushHook(hook func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionRepositoryGetIncomeBetweenFunc) SetDefaultReturn(r0 beans.Amount, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionRepositoryGetIncomeBetweenFunc) PushReturn(r0 beans.Amount, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error) {
		return r0, r1
	})
}

func (f *TransactionRepositoryGetIncomeBetweenFunc) nextHook() func(context.Context, beans.ID, beans.Date, beans.Date) (beans.Amount, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionRepositoryGetIncomeBetweenFunc) appendCall(r0 TransactionRepositoryGetIncomeBetweenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TransactionRepositoryGetIncomeBetweenFuncCall objects describing the
// invocations of this function.
func (f *TransactionRepositoryGetIncomeBetweenFunc) History() []TransactionRepositoryGetIncomeBetweenFuncCall {
	f.mutex.Lock()
	history := make([]TransactionRepositoryGetIncomeBetweenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionRepositoryGetIncomeBetweenFuncCall is an object that describes
// an invocation of method GetIncomeBetween on an instance of
// MockTransactionRepository.
type TransactionRepositoryGetIncomeBetweenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Date
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.Date
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 beans.Amount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionRepositoryGetIncomeBetweenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionRepositoryGetIncomeBetweenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TransactionRepositoryUpdateFunc describes the behavior when the Update
// method of the parent MockTransactionRepository instance is invoked.
type TransactionRepositoryUpdateFunc struct {
	defaultHook func(context.Context, *beans.Transaction) error
	hooks       []func(context.Context, *beans.Transaction) error
	history     []TransactionRepositoryUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionRepository) Update(v0 context.Context, v1 *beans.Transaction) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(TransactionRepositoryUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockTransactionRepository instance is invoked and the hook queue
// is empty.
func (f *TransactionRepositoryUpdateFunc) SetDefaultHook(hook func(context.Context, *beans.Transaction) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockTransactionRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TransactionRepositoryUpdateFunc) PushHook(hook func(context.Context, *beans.Transaction) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionRepositoryUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.Transaction) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionRepositoryUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.Transaction) error {
		return r0
	})
}

func (f *TransactionRepositoryUpdateFunc) nextHook() func(context.Context, *beans.Transaction) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionRepositoryUpdateFunc) appendCall(r0 TransactionRepositoryUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionRepositoryUpdateFuncCall objects
// describing the invocations of this function.
func (f *TransactionRepositoryUpdateFunc) History() []TransactionRepositoryUpdateFuncCall {
	f.mutex.Lock()
	history := make([]TransactionRepositoryUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionRepositoryUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockTransactionRepository.
type TransactionRepositoryUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionRepositoryUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionRepositoryUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockTx is a mock implementation of the Tx interface (from the package
// github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockTx struct {
	// CommitFunc is an instance of a mock function object controlling the
	// behavior of the method Commit.
	CommitFunc *TxCommitFunc
	// RollbackFunc is an instance of a mock function object controlling the
	// behavior of the method Rollback.
	RollbackFunc *TxRollbackFunc
}

// NewMockTx creates a new mock of the Tx interface. All methods return zero
// values for all results, unless overwritten.
func NewMockTx() *MockTx {
	return &MockTx{
		CommitFunc: &TxCommitFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		RollbackFunc: &TxRollbackFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockTx creates a new mock of the Tx interface. All methods panic
// on invocation, unless overwritten.
func NewStrictMockTx() *MockTx {
	return &MockTx{
		CommitFunc: &TxCommitFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockTx.Commit")
			},
		},
		RollbackFunc: &TxRollbackFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockTx.Rollback")
			},
		},
	}
}

// NewMockTxFrom creates a new mock of the MockTx interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockTxFrom(i beans.Tx) *MockTx {
	return &MockTx{
		CommitFunc: &TxCommitFunc{
			defaultHook: i.Commit,
		},
		RollbackFunc: &TxRollbackFunc{
			defaultHook: i.Rollback,
		},
	}
}

// TxCommitFunc describes the behavior when the Commit method of the parent
// MockTx instance is invoked.
type TxCommitFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []TxCommitFuncCall
	mutex       sync.Mutex
}

// Commit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTx) Commit(v0 context.Context) error {
	r0 := m.CommitFunc.nextHook()(v0)
	m.CommitFunc.appendCall(TxCommitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Commit method of the
// parent MockTx instance is invoked and the hook queue is empty.
func (f *TxCommitFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Commit method of the parent MockTx instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *TxCommitFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxCommitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxCommitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *TxCommitFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxCommitFunc) appendCall(r0 TxCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxCommitFuncCall objects describing the
// invocations of this function.
func (f *TxCommitFunc) History() []TxCommitFuncCall {
	f.mutex.Lock()
	history := make([]TxCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxCommitFuncCall is an object that describes an invocation of method
// Commit on an instance of MockTx.
type TxCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TxRollbackFunc describes the behavior when the Rollback method of the
// parent MockTx instance is invoked.
type TxRollbackFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []TxRollbackFuncCall
	mutex       sync.Mutex
}

// Rollback delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTx) Rollback(v0 context.Context) error {
	r0 := m.RollbackFunc.nextHook()(v0)
	m.RollbackFunc.appendCall(TxRollbackFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Rollback method of
// the parent MockTx instance is invoked and the hook queue is empty.
func (f *TxRollbackFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Rollback method of the parent MockTx instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TxRollbackFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxRollbackFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxRollbackFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *TxRollbackFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxRollbackFunc) appendCall(r0 TxRollbackFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxRollbackFuncCall objects describing the
// invocations of this function.
func (f *TxRollbackFunc) History() []TxRollbackFuncCall {
	f.mutex.Lock()
	history := make([]TxRollbackFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxRollbackFuncCall is an object that describes an invocation of method
// Rollback on an instance of MockTx.
type TxRollbackFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxRollbackFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxRollbackFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockTxManager is a mock implementation of the TxManager interface (from
// the package github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockTxManager struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *TxManagerCreateFunc
}

// NewMockTxManager creates a new mock of the TxManager interface. All
// methods return zero values for all results, unless overwritten.
func NewMockTxManager() *MockTxManager {
	return &MockTxManager{
		CreateFunc: &TxManagerCreateFunc{
			defaultHook: func(context.Context) (r0 beans.Tx, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockTxManager creates a new mock of the TxManager interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockTxManager() *MockTxManager {
	return &MockTxManager{
		CreateFunc: &TxManagerCreateFunc{
			defaultHook: func(context.Context) (beans.Tx, error) {
				panic("unexpected invocation of MockTxManager.Create")
			},
		},
	}
}

// NewMockTxManagerFrom creates a new mock of the MockTxManager interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockTxManagerFrom(i beans.TxManager) *MockTxManager {
	return &MockTxManager{
		CreateFunc: &TxManagerCreateFunc{
			defaultHook: i.Create,
		},
	}
}

// TxManagerCreateFunc describes the behavior when the Create method of the
// parent MockTxManager instance is invoked.
type TxManagerCreateFunc struct {
	defaultHook func(context.Context) (beans.Tx, error)
	hooks       []func(context.Context) (beans.Tx, error)
	history     []TxManagerCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTxManager) Create(v0 context.Context) (beans.Tx, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0)
	m.CreateFunc.appendCall(TxManagerCreateFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockTxManager instance is invoked and the hook queue is empty.
func (f *TxManagerCreateFunc) SetDefaultHook(hook func(context.Context) (beans.Tx, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockTxManager instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TxManagerCreateFunc) PushHook(hook func(context.Context) (beans.Tx, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxManagerCreateFunc) SetDefaultReturn(r0 beans.Tx, r1 error) {
	f.SetDefaultHook(func(context.Context) (beans.Tx, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxManagerCreateFunc) PushReturn(r0 beans.Tx, r1 error) {
	f.PushHook(func(context.Context) (beans.Tx, error) {
		return r0, r1
	})
}

func (f *TxManagerCreateFunc) nextHook() func(context.Context) (beans.Tx, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxManagerCreateFunc) appendCall(r0 TxManagerCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxManagerCreateFuncCall objects describing
// the invocations of this function.
func (f *TxManagerCreateFunc) History() []TxManagerCreateFuncCall {
	f.mutex.Lock()
	history := make([]TxManagerCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxManagerCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockTxManager.
type TxManagerCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 beans.Tx
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxManagerCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxManagerCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUserContract is a mock implementation of the UserContract interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockUserContract struct {
	// CreateUserFunc is an instance of a mock function object controlling
	// the behavior of the method CreateUser.
	CreateUserFunc *UserContractCreateUserFunc
	// LoginFunc is an instance of a mock function object controlling the
	// behavior of the method Login.
	LoginFunc *UserContractLoginFunc
}

// NewMockUserContract creates a new mock of the UserContract interface. All
// methods return zero values for all results, unless overwritten.
func NewMockUserContract() *MockUserContract {
	return &MockUserContract{
		CreateUserFunc: &UserContractCreateUserFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (r0 *beans.User, r1 error) {
				return
			},
		},
		LoginFunc: &UserContractLoginFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (r0 *beans.User, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUserContract creates a new mock of the UserContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUserContract() *MockUserContract {
	return &MockUserContract{
		CreateUserFunc: &UserContractCreateUserFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
				panic("unexpected invocation of MockUserContract.CreateUser")
			},
		},
		LoginFunc: &UserContractLoginFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
				panic("unexpected invocation of MockUserContract.Login")
			},
		},
	}
}

// NewMockUserContractFrom creates a new mock of the MockUserContract
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserContractFrom(i beans.UserContract) *MockUserContract {
	return &MockUserContract{
		CreateUserFunc: &UserContractCreateUserFunc{
			defaultHook: i.CreateUser,
		},
		LoginFunc: &UserContractLoginFunc{
			defaultHook: i.Login,
		},
	}
}

// UserContractCreateUserFunc describes the behavior when the CreateUser
// method of the parent MockUserContract instance is invoked.
type UserContractCreateUserFunc struct {
	defaultHook func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	hooks       []func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	history     []UserContractCreateUserFuncCall
	mutex       sync.Mutex
}

// CreateUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserContract) CreateUser(v0 context.Context, v1 beans.Username, v2 beans.Password) (*beans.User, error) {
	r0, r1 := m.CreateUserFunc.nextHook()(v0, v1, v2)
	m.CreateUserFunc.appendCall(UserContractCreateUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateUser method of
// the parent MockUserContract instance is invoked and the hook queue is
// empty.
func (f *UserContractCreateUserFunc) SetDefaultHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateUser method of the parent MockUserContract instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserContractCreateUserFunc) PushHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserContractCreateUserFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserContractCreateUserFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserContractCreateUserFunc) nextHook() func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserContractCreateUserFunc) appendCall(r0 UserContractCreateUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserContractCreateUserFuncCall objects
// describing the invocations of this function.
func (f *UserContractCreateUserFunc) History() []UserContractCreateUserFuncCall {
	f.mutex.Lock()
	history := make([]UserContractCreateUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserContractCreateUserFuncCall is an object that describes an invocation
// of method CreateUser on an instance of MockUserContract.
type UserContractCreateUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Password
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserContractCreateUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserContractCreateUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserContractLoginFunc describes the behavior when the Login method of the
// parent MockUserContract instance is invoked.
type UserContractLoginFunc struct {
	defaultHook func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	hooks       []func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	history     []UserContractLoginFuncCall
	mutex       sync.Mutex
}

// Login delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserContract) Login(v0 context.Context, v1 beans.Username, v2 beans.Password) (*beans.User, error) {
	r0, r1 := m.LoginFunc.nextHook()(v0, v1, v2)
	m.LoginFunc.appendCall(UserContractLoginFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Login method of the
// parent MockUserContract instance is invoked and the hook queue is empty.
func (f *UserContractLoginFunc) SetDefaultHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Login method of the parent MockUserContract instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserContractLoginFunc) PushHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserContractLoginFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserContractLoginFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserContractLoginFunc) nextHook() func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserContractLoginFunc) appendCall(r0 UserContractLoginFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserContractLoginFuncCall objects
// describing the invocations of this function.
func (f *UserContractLoginFunc) History() []UserContractLoginFuncCall {
	f.mutex.Lock()
	history := make([]UserContractLoginFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserContractLoginFuncCall is an object that describes an invocation of
// method Login on an instance of MockUserContract.
type UserContractLoginFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Password
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserContractLoginFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserContractLoginFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUserRepository is a mock implementation of the UserRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockUserRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserRepositoryCreateFunc
	// ExistsFunc is an instance of a mock function object controlling the
	// behavior of the method Exists.
	ExistsFunc *UserRepositoryExistsFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserRepositoryGetFunc
	// GetByUsernameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsername.
	GetByUsernameFunc *UserRepositoryGetByUsernameFunc
}

// NewMockUserRepository creates a new mock of the UserRepository interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUserRepository() *MockUserRepository {
	return &MockUserRepository{
		CreateFunc: &UserRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Username, beans.PasswordHash) (r0 error) {
				return
			},
		},
		ExistsFunc: &UserRepositoryExistsFunc{
			defaultHook: func(context.Context, beans.Username) (r0 bool, r1 error) {
				return
			},
		},
		GetFunc: &UserRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.User, r1 error) {
				return
			},
		},
		GetByUsernameFunc: &UserRepositoryGetByUsernameFunc{
			defaultHook: func(context.Context, beans.Username) (r0 *beans.User, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUserRepository creates a new mock of the UserRepository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUserRepository() *MockUserRepository {
	return &MockUserRepository{
		CreateFunc: &UserRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error {
				panic("unexpected invocation of MockUserRepository.Create")
			},
		},
		ExistsFunc: &UserRepositoryExistsFunc{
			defaultHook: func(context.Context, beans.Username) (bool, error) {
				panic("unexpected invocation of MockUserRepository.Exists")
			},
		},
		GetFunc: &UserRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.User, error) {
				panic("unexpected invocation of MockUserRepository.Get")
			},
		},
		GetByUsernameFunc: &UserRepositoryGetByUsernameFunc{
			defaultHook: func(context.Context, beans.Username) (*beans.User, error) {
				panic("unexpected invocation of MockUserRepository.GetByUsername")
			},
		},
	}
}

// NewMockUserRepositoryFrom creates a new mock of the MockUserRepository
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserRepositoryFrom(i beans.UserRepository) *MockUserRepository {
	return &MockUserRepository{
		CreateFunc: &UserRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		ExistsFunc: &UserRepositoryExistsFunc{
			defaultHook: i.Exists,
		},
		GetFunc: &UserRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetByUsernameFunc: &UserRepositoryGetByUsernameFunc{
			defaultHook: i.GetByUsername,
		},
	}
}

// UserRepositoryCreateFunc describes the behavior when the Create method of
// the parent MockUserRepository instance is invoked.
type UserRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error
	hooks       []func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error
	history     []UserRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRepository) Create(v0 context.Context, v1 beans.ID, v2 beans.Username, v3 beans.PasswordHash) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(UserRepositoryCreateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserRepository instance is invoked and the hook queue is
// empty.
func (f *UserRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRepositoryCreateFunc) PushHook(hook func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error {
		return r0
	})
}

func (f *UserRepositoryCreateFunc) nextHook() func(context.Context, beans.ID, beans.Username, beans.PasswordHash) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryCreateFunc) appendCall(r0 UserRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryCreateFunc) History() []UserRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockUserRepository.
type UserRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Username
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.PasswordHash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRepositoryExistsFunc describes the behavior when the Exists method of
// the parent MockUserRepository instance is invoked.
type UserRepositoryExistsFunc struct {
	defaultHook func(context.Context, beans.Username) (bool, error)
	hooks       []func(context.Context, beans.Username) (bool, error)
	history     []UserRepositoryExistsFuncCall
	mutex       sync.Mutex
}

// Exists delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRepository) Exists(v0 context.Context, v1 beans.Username) (bool, error) {
	r0, r1 := m.ExistsFunc.nextHook()(v0, v1)
	m.ExistsFunc.appendCall(UserRepositoryExistsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exists method of the
// parent MockUserRepository instance is invoked and the hook queue is
// empty.
func (f *UserRepositoryExistsFunc) SetDefaultHook(hook func(context.Context, beans.Username) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exists method of the parent MockUserRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRepositoryExistsFunc) PushHook(hook func(context.Context, beans.Username) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, beans.Username) (bool, error) {
		return r0, r1
	})
}

func (f *UserRepositoryExistsFunc) nextHook() func(context.Context, beans.Username) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryExistsFunc) appendCall(r0 UserRepositoryExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryExistsFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryExistsFunc) History() []UserRepositoryExistsFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryExistsFuncCall is an object that describes an invocation of
// method Exists on an instance of MockUserRepository.
type UserRepositoryExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserRepositoryGetFunc describes the behavior when the Get method of the
// parent MockUserRepository instance is invoked.
type UserRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.User, error)
	hooks       []func(context.Context, beans.ID) (*beans.User, error)
	history     []UserRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRepository) Get(v0 context.Context, v1 beans.ID) (*beans.User, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(UserRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserRepository instance is invoked and the hook queue is
// empty.
func (f *UserRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserRepository instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryGetFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryGetFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryGetFunc) appendCall(r0 UserRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryGetFunc) History() []UserRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockUserRepository.
type UserRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserRepositoryGetByUsernameFunc describes the behavior when the
// GetByUsername method of the parent MockUserRepository instance is
// invoked.
type UserRepositoryGetByUsernameFunc struct {
	defaultHook func(context.Context, beans.Username) (*beans.User, error)
	hooks       []func(context.Context, beans.Username) (*beans.User, error)
	history     []UserRepositoryGetByUsernameFuncCall
	mutex       sync.Mutex
}

// GetByUsername delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserRepository) GetByUsername(v0 context.Context, v1 beans.Username) (*beans.User, error) {
	r0, r1 := m.GetByUsernameFunc.nextHook()(v0, v1)
	m.GetByUsernameFunc.appendCall(UserRepositoryGetByUsernameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsername method
// of the parent MockUserRepository instance is invoked and the hook queue
// is empty.
func (f *UserRepositoryGetByUsernameFunc) SetDefaultHook(hook func(context.Context, beans.Username) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsername method of the parent MockUserRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserRepositoryGetByUsernameFunc) PushHook(hook func(context.Context, beans.Username) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryGetByUsernameFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryGetByUsernameFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.Username) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserRepositoryGetByUsernameFunc) nextHook() func(context.Context, beans.Username) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryGetByUsernameFunc) appendCall(r0 UserRepositoryGetByUsernameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryGetByUsernameFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryGetByUsernameFunc) History() []UserRepositoryGetByUsernameFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryGetByUsernameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryGetByUsernameFuncCall is an object that describes an
// invocation of method GetByUsername on an instance of MockUserRepository.
type UserRepositoryGetByUsernameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryGetByUsernameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryGetByUsernameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockValidatable is a mock implementation of the Validatable interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockValidatable struct {
	// ValidateFunc is an instance of a mock function object controlling the
	// behavior of the method Validate.
	ValidateFunc *ValidatableValidateFunc
}

// NewMockValidatable creates a new mock of the Validatable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockValidatable creates a new mock of the Validatable interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockValidatable.Validate")
			},
		},
	}
}

// NewMockValidatableFrom creates a new mock of the MockValidatable
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockValidatableFrom(i beans.Validatable) *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: i.Validate,
		},
	}
}

// ValidatableValidateFunc describes the behavior when the Validate method
// of the parent MockValidatable instance is invoked.
type ValidatableValidateFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ValidatableValidateFuncCall
	mutex       sync.Mutex
}

// Validate delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockValidatable) Validate() error {
	r0 := m.ValidateFunc.nextHook()()
	m.ValidateFunc.appendCall(ValidatableValidateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Validate method of
// the parent MockValidatable instance is invoked and the hook queue is
// empty.
func (f *ValidatableValidateFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Validate method of the parent MockValidatable instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ValidatableValidateFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ValidatableValidateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ValidatableValidateFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ValidatableValidateFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ValidatableValidateFunc) appendCall(r0 ValidatableValidateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ValidatableValidateFuncCall objects
// describing the invocations of this function.
func (f *ValidatableValidateFunc) History() []ValidatableValidateFuncCall {
	f.mutex.Lock()
	history := make([]ValidatableValidateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ValidatableValidateFuncCall is an object that describes an invocation of
// method Validate on an instance of MockValidatable.
type ValidatableValidateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ValidatableValidateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ValidatableValidateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
