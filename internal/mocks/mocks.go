// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	"time"

	beans "github.com/bradenrayhorn/beans/beans"
)

// MockAccountRepository is a mock implementation of the AccountRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockAccountRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccountRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *AccountRepositoryGetFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *AccountRepositoryGetForBudgetFunc
}

// NewMockAccountRepository creates a new mock of the AccountRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAccountRepository() *MockAccountRepository {
	return &MockAccountRepository{
		CreateFunc: &AccountRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name, beans.ID) (r0 error) {
				return
			},
		},
		GetFunc: &AccountRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Account, r1 error) {
				return
			},
		},
		GetForBudgetFunc: &AccountRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Account, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAccountRepository creates a new mock of the
// AccountRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAccountRepository() *MockAccountRepository {
	return &MockAccountRepository{
		CreateFunc: &AccountRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name, beans.ID) error {
				panic("unexpected invocation of MockAccountRepository.Create")
			},
		},
		GetFunc: &AccountRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Account, error) {
				panic("unexpected invocation of MockAccountRepository.Get")
			},
		},
		GetForBudgetFunc: &AccountRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Account, error) {
				panic("unexpected invocation of MockAccountRepository.GetForBudget")
			},
		},
	}
}

// NewMockAccountRepositoryFrom creates a new mock of the
// MockAccountRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAccountRepositoryFrom(i beans.AccountRepository) *MockAccountRepository {
	return &MockAccountRepository{
		CreateFunc: &AccountRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &AccountRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetForBudgetFunc: &AccountRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
	}
}

// AccountRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockAccountRepository instance is invoked.
type AccountRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Name, beans.ID) error
	hooks       []func(context.Context, beans.ID, beans.Name, beans.ID) error
	history     []AccountRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccountRepository) Create(v0 context.Context, v1 beans.ID, v2 beans.Name, v3 beans.ID) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(AccountRepositoryCreateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccountRepository instance is invoked and the hook queue is
// empty.
func (f *AccountRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Name, beans.ID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccountRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccountRepositoryCreateFunc) PushHook(hook func(context.Context, beans.ID, beans.Name, beans.ID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Name, beans.ID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Name, beans.ID) error {
		return r0
	})
}

func (f *AccountRepositoryCreateFunc) nextHook() func(context.Context, beans.ID, beans.Name, beans.ID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountRepositoryCreateFunc) appendCall(r0 AccountRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *AccountRepositoryCreateFunc) History() []AccountRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccountRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockAccountRepository.
type AccountRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccountRepositoryGetFunc describes the behavior when the Get method of
// the parent MockAccountRepository instance is invoked.
type AccountRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Account, error)
	hooks       []func(context.Context, beans.ID) (*beans.Account, error)
	history     []AccountRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccountRepository) Get(v0 context.Context, v1 beans.ID) (*beans.Account, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(AccountRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockAccountRepository instance is invoked and the hook queue is
// empty.
func (f *AccountRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockAccountRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccountRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountRepositoryGetFunc) SetDefaultReturn(r0 *beans.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountRepositoryGetFunc) PushReturn(r0 *beans.Account, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Account, error) {
		return r0, r1
	})
}

func (f *AccountRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountRepositoryGetFunc) appendCall(r0 AccountRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *AccountRepositoryGetFunc) History() []AccountRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]AccountRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockAccountRepository.
type AccountRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccountRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockAccountRepository instance is
// invoked.
type AccountRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Account, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Account, error)
	history     []AccountRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccountRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Account, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(AccountRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockAccountRepository instance is invoked and the hook
// queue is empty.
func (f *AccountRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockAccountRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccountRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Account, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Account, error) {
		return r0, r1
	})
}

func (f *AccountRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountRepositoryGetForBudgetFunc) appendCall(r0 AccountRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountRepositoryGetForBudgetFuncCall
// objects describing the invocations of this function.
func (f *AccountRepositoryGetForBudgetFunc) History() []AccountRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]AccountRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of
// MockAccountRepository.
type AccountRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockAccountService is a mock implementation of the AccountService
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockAccountService struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccountServiceCreateFunc
}

// NewMockAccountService creates a new mock of the AccountService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockAccountService() *MockAccountService {
	return &MockAccountService{
		CreateFunc: &AccountServiceCreateFunc{
			defaultHook: func(context.Context, beans.Name, beans.ID) (r0 *beans.Account, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAccountService creates a new mock of the AccountService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAccountService() *MockAccountService {
	return &MockAccountService{
		CreateFunc: &AccountServiceCreateFunc{
			defaultHook: func(context.Context, beans.Name, beans.ID) (*beans.Account, error) {
				panic("unexpected invocation of MockAccountService.Create")
			},
		},
	}
}

// NewMockAccountServiceFrom creates a new mock of the MockAccountService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockAccountServiceFrom(i beans.AccountService) *MockAccountService {
	return &MockAccountService{
		CreateFunc: &AccountServiceCreateFunc{
			defaultHook: i.Create,
		},
	}
}

// AccountServiceCreateFunc describes the behavior when the Create method of
// the parent MockAccountService instance is invoked.
type AccountServiceCreateFunc struct {
	defaultHook func(context.Context, beans.Name, beans.ID) (*beans.Account, error)
	hooks       []func(context.Context, beans.Name, beans.ID) (*beans.Account, error)
	history     []AccountServiceCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccountService) Create(v0 context.Context, v1 beans.Name, v2 beans.ID) (*beans.Account, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(AccountServiceCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccountService instance is invoked and the hook queue is
// empty.
func (f *AccountServiceCreateFunc) SetDefaultHook(hook func(context.Context, beans.Name, beans.ID) (*beans.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccountService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccountServiceCreateFunc) PushHook(hook func(context.Context, beans.Name, beans.ID) (*beans.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccountServiceCreateFunc) SetDefaultReturn(r0 *beans.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Name, beans.ID) (*beans.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccountServiceCreateFunc) PushReturn(r0 *beans.Account, r1 error) {
	f.PushHook(func(context.Context, beans.Name, beans.ID) (*beans.Account, error) {
		return r0, r1
	})
}

func (f *AccountServiceCreateFunc) nextHook() func(context.Context, beans.Name, beans.ID) (*beans.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccountServiceCreateFunc) appendCall(r0 AccountServiceCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccountServiceCreateFuncCall objects
// describing the invocations of this function.
func (f *AccountServiceCreateFunc) History() []AccountServiceCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccountServiceCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccountServiceCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockAccountService.
type AccountServiceCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Name
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccountServiceCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccountServiceCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockBudgetRepository is a mock implementation of the BudgetRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockBudgetRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *BudgetRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *BudgetRepositoryGetFunc
	// GetBudgetsForUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetBudgetsForUser.
	GetBudgetsForUserFunc *BudgetRepositoryGetBudgetsForUserFunc
}

// NewMockBudgetRepository creates a new mock of the BudgetRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockBudgetRepository() *MockBudgetRepository {
	return &MockBudgetRepository{
		CreateFunc: &BudgetRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) (r0 error) {
				return
			},
		},
		GetFunc: &BudgetRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Budget, r1 error) {
				return
			},
		},
		GetBudgetsForUserFunc: &BudgetRepositoryGetBudgetsForUserFunc{
			defaultHook: func(context.Context, beans.UserID) (r0 []*beans.Budget, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockBudgetRepository creates a new mock of the BudgetRepository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBudgetRepository() *MockBudgetRepository {
	return &MockBudgetRepository{
		CreateFunc: &BudgetRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error {
				panic("unexpected invocation of MockBudgetRepository.Create")
			},
		},
		GetFunc: &BudgetRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetRepository.Get")
			},
		},
		GetBudgetsForUserFunc: &BudgetRepositoryGetBudgetsForUserFunc{
			defaultHook: func(context.Context, beans.UserID) ([]*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetRepository.GetBudgetsForUser")
			},
		},
	}
}

// NewMockBudgetRepositoryFrom creates a new mock of the
// MockBudgetRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockBudgetRepositoryFrom(i beans.BudgetRepository) *MockBudgetRepository {
	return &MockBudgetRepository{
		CreateFunc: &BudgetRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &BudgetRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetBudgetsForUserFunc: &BudgetRepositoryGetBudgetsForUserFunc{
			defaultHook: i.GetBudgetsForUser,
		},
	}
}

// BudgetRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockBudgetRepository instance is invoked.
type BudgetRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error
	hooks       []func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error
	history     []BudgetRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBudgetRepository) Create(v0 context.Context, v1 beans.ID, v2 beans.Name, v3 beans.UserID, v4 time.Time) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateFunc.appendCall(BudgetRepositoryCreateFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockBudgetRepository instance is invoked and the hook queue is
// empty.
func (f *BudgetRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockBudgetRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BudgetRepositoryCreateFunc) PushHook(hook func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error {
		return r0
	})
}

func (f *BudgetRepositoryCreateFunc) nextHook() func(context.Context, beans.ID, beans.Name, beans.UserID, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetRepositoryCreateFunc) appendCall(r0 BudgetRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *BudgetRepositoryCreateFunc) History() []BudgetRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]BudgetRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockBudgetRepository.
type BudgetRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.UserID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BudgetRepositoryGetFunc describes the behavior when the Get method of the
// parent MockBudgetRepository instance is invoked.
type BudgetRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Budget, error)
	hooks       []func(context.Context, beans.ID) (*beans.Budget, error)
	history     []BudgetRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBudgetRepository) Get(v0 context.Context, v1 beans.ID) (*beans.Budget, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(BudgetRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockBudgetRepository instance is invoked and the hook queue is
// empty.
func (f *BudgetRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockBudgetRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BudgetRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetRepositoryGetFunc) SetDefaultReturn(r0 *beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetRepositoryGetFunc) PushReturn(r0 *beans.Budget, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetRepositoryGetFunc) appendCall(r0 BudgetRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *BudgetRepositoryGetFunc) History() []BudgetRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]BudgetRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockBudgetRepository.
type BudgetRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BudgetRepositoryGetBudgetsForUserFunc describes the behavior when the
// GetBudgetsForUser method of the parent MockBudgetRepository instance is
// invoked.
type BudgetRepositoryGetBudgetsForUserFunc struct {
	defaultHook func(context.Context, beans.UserID) ([]*beans.Budget, error)
	hooks       []func(context.Context, beans.UserID) ([]*beans.Budget, error)
	history     []BudgetRepositoryGetBudgetsForUserFuncCall
	mutex       sync.Mutex
}

// GetBudgetsForUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBudgetRepository) GetBudgetsForUser(v0 context.Context, v1 beans.UserID) ([]*beans.Budget, error) {
	r0, r1 := m.GetBudgetsForUserFunc.nextHook()(v0, v1)
	m.GetBudgetsForUserFunc.appendCall(BudgetRepositoryGetBudgetsForUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBudgetsForUser
// method of the parent MockBudgetRepository instance is invoked and the
// hook queue is empty.
func (f *BudgetRepositoryGetBudgetsForUserFunc) SetDefaultHook(hook func(context.Context, beans.UserID) ([]*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBudgetsForUser method of the parent MockBudgetRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BudgetRepositoryGetBudgetsForUserFunc) PushHook(hook func(context.Context, beans.UserID) ([]*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetRepositoryGetBudgetsForUserFunc) SetDefaultReturn(r0 []*beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.UserID) ([]*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetRepositoryGetBudgetsForUserFunc) PushReturn(r0 []*beans.Budget, r1 error) {
	f.PushHook(func(context.Context, beans.UserID) ([]*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetRepositoryGetBudgetsForUserFunc) nextHook() func(context.Context, beans.UserID) ([]*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetRepositoryGetBudgetsForUserFunc) appendCall(r0 BudgetRepositoryGetBudgetsForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetRepositoryGetBudgetsForUserFuncCall
// objects describing the invocations of this function.
func (f *BudgetRepositoryGetBudgetsForUserFunc) History() []BudgetRepositoryGetBudgetsForUserFuncCall {
	f.mutex.Lock()
	history := make([]BudgetRepositoryGetBudgetsForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetRepositoryGetBudgetsForUserFuncCall is an object that describes an
// invocation of method GetBudgetsForUser on an instance of
// MockBudgetRepository.
type BudgetRepositoryGetBudgetsForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.UserID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetRepositoryGetBudgetsForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetRepositoryGetBudgetsForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockBudgetService is a mock implementation of the BudgetService interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockBudgetService struct {
	// CreateBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method CreateBudget.
	CreateBudgetFunc *BudgetServiceCreateBudgetFunc
}

// NewMockBudgetService creates a new mock of the BudgetService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockBudgetService() *MockBudgetService {
	return &MockBudgetService{
		CreateBudgetFunc: &BudgetServiceCreateBudgetFunc{
			defaultHook: func(context.Context, beans.Name, beans.UserID) (r0 *beans.Budget, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockBudgetService creates a new mock of the BudgetService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBudgetService() *MockBudgetService {
	return &MockBudgetService{
		CreateBudgetFunc: &BudgetServiceCreateBudgetFunc{
			defaultHook: func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error) {
				panic("unexpected invocation of MockBudgetService.CreateBudget")
			},
		},
	}
}

// NewMockBudgetServiceFrom creates a new mock of the MockBudgetService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockBudgetServiceFrom(i beans.BudgetService) *MockBudgetService {
	return &MockBudgetService{
		CreateBudgetFunc: &BudgetServiceCreateBudgetFunc{
			defaultHook: i.CreateBudget,
		},
	}
}

// BudgetServiceCreateBudgetFunc describes the behavior when the
// CreateBudget method of the parent MockBudgetService instance is invoked.
type BudgetServiceCreateBudgetFunc struct {
	defaultHook func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error)
	hooks       []func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error)
	history     []BudgetServiceCreateBudgetFuncCall
	mutex       sync.Mutex
}

// CreateBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBudgetService) CreateBudget(v0 context.Context, v1 beans.Name, v2 beans.UserID) (*beans.Budget, error) {
	r0, r1 := m.CreateBudgetFunc.nextHook()(v0, v1, v2)
	m.CreateBudgetFunc.appendCall(BudgetServiceCreateBudgetFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateBudget method
// of the parent MockBudgetService instance is invoked and the hook queue is
// empty.
func (f *BudgetServiceCreateBudgetFunc) SetDefaultHook(hook func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateBudget method of the parent MockBudgetService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BudgetServiceCreateBudgetFunc) PushHook(hook func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BudgetServiceCreateBudgetFunc) SetDefaultReturn(r0 *beans.Budget, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BudgetServiceCreateBudgetFunc) PushReturn(r0 *beans.Budget, r1 error) {
	f.PushHook(func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error) {
		return r0, r1
	})
}

func (f *BudgetServiceCreateBudgetFunc) nextHook() func(context.Context, beans.Name, beans.UserID) (*beans.Budget, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BudgetServiceCreateBudgetFunc) appendCall(r0 BudgetServiceCreateBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BudgetServiceCreateBudgetFuncCall objects
// describing the invocations of this function.
func (f *BudgetServiceCreateBudgetFunc) History() []BudgetServiceCreateBudgetFuncCall {
	f.mutex.Lock()
	history := make([]BudgetServiceCreateBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BudgetServiceCreateBudgetFuncCall is an object that describes an
// invocation of method CreateBudget on an instance of MockBudgetService.
type BudgetServiceCreateBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Name
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.UserID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Budget
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BudgetServiceCreateBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BudgetServiceCreateBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockCategoryRepository is a mock implementation of the CategoryRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockCategoryRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *CategoryRepositoryCreateFunc
	// CreateGroupFunc is an instance of a mock function object controlling
	// the behavior of the method CreateGroup.
	CreateGroupFunc *CategoryRepositoryCreateGroupFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *CategoryRepositoryGetForBudgetFunc
	// GetGroupsForBudgetFunc is an instance of a mock function object
	// controlling the behavior of the method GetGroupsForBudget.
	GetGroupsForBudgetFunc *CategoryRepositoryGetGroupsForBudgetFunc
	// GetSingleForBudgetFunc is an instance of a mock function object
	// controlling the behavior of the method GetSingleForBudget.
	GetSingleForBudgetFunc *CategoryRepositoryGetSingleForBudgetFunc
	// GroupExistsFunc is an instance of a mock function object controlling
	// the behavior of the method GroupExists.
	GroupExistsFunc *CategoryRepositoryGroupExistsFunc
}

// NewMockCategoryRepository creates a new mock of the CategoryRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockCategoryRepository() *MockCategoryRepository {
	return &MockCategoryRepository{
		CreateFunc: &CategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Category) (r0 error) {
				return
			},
		},
		CreateGroupFunc: &CategoryRepositoryCreateGroupFunc{
			defaultHook: func(context.Context, *beans.CategoryGroup) (r0 error) {
				return
			},
		},
		GetForBudgetFunc: &CategoryRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Category, r1 error) {
				return
			},
		},
		GetGroupsForBudgetFunc: &CategoryRepositoryGetGroupsForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.CategoryGroup, r1 error) {
				return
			},
		},
		GetSingleForBudgetFunc: &CategoryRepositoryGetSingleForBudgetFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (r0 *beans.Category, r1 error) {
				return
			},
		},
		GroupExistsFunc: &CategoryRepositoryGroupExistsFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (r0 bool, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockCategoryRepository creates a new mock of the
// CategoryRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockCategoryRepository() *MockCategoryRepository {
	return &MockCategoryRepository{
		CreateFunc: &CategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Category) error {
				panic("unexpected invocation of MockCategoryRepository.Create")
			},
		},
		CreateGroupFunc: &CategoryRepositoryCreateGroupFunc{
			defaultHook: func(context.Context, *beans.CategoryGroup) error {
				panic("unexpected invocation of MockCategoryRepository.CreateGroup")
			},
		},
		GetForBudgetFunc: &CategoryRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Category, error) {
				panic("unexpected invocation of MockCategoryRepository.GetForBudget")
			},
		},
		GetGroupsForBudgetFunc: &CategoryRepositoryGetGroupsForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
				panic("unexpected invocation of MockCategoryRepository.GetGroupsForBudget")
			},
		},
		GetSingleForBudgetFunc: &CategoryRepositoryGetSingleForBudgetFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
				panic("unexpected invocation of MockCategoryRepository.GetSingleForBudget")
			},
		},
		GroupExistsFunc: &CategoryRepositoryGroupExistsFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (bool, error) {
				panic("unexpected invocation of MockCategoryRepository.GroupExists")
			},
		},
	}
}

// NewMockCategoryRepositoryFrom creates a new mock of the
// MockCategoryRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockCategoryRepositoryFrom(i beans.CategoryRepository) *MockCategoryRepository {
	return &MockCategoryRepository{
		CreateFunc: &CategoryRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		CreateGroupFunc: &CategoryRepositoryCreateGroupFunc{
			defaultHook: i.CreateGroup,
		},
		GetForBudgetFunc: &CategoryRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
		GetGroupsForBudgetFunc: &CategoryRepositoryGetGroupsForBudgetFunc{
			defaultHook: i.GetGroupsForBudget,
		},
		GetSingleForBudgetFunc: &CategoryRepositoryGetSingleForBudgetFunc{
			defaultHook: i.GetSingleForBudget,
		},
		GroupExistsFunc: &CategoryRepositoryGroupExistsFunc{
			defaultHook: i.GroupExists,
		},
	}
}

// CategoryRepositoryCreateFunc describes the behavior when the Create
// method of the parent MockCategoryRepository instance is invoked.
type CategoryRepositoryCreateFunc struct {
	defaultHook func(context.Context, *beans.Category) error
	hooks       []func(context.Context, *beans.Category) error
	history     []CategoryRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCategoryRepository) Create(v0 context.Context, v1 *beans.Category) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(CategoryRepositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockCategoryRepository instance is invoked and the hook queue is
// empty.
func (f *CategoryRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, *beans.Category) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockCategoryRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CategoryRepositoryCreateFunc) PushHook(hook func(context.Context, *beans.Category) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.Category) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.Category) error {
		return r0
	})
}

func (f *CategoryRepositoryCreateFunc) nextHook() func(context.Context, *beans.Category) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryCreateFunc) appendCall(r0 CategoryRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *CategoryRepositoryCreateFunc) History() []CategoryRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockCategoryRepository.
type CategoryRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Category
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CategoryRepositoryCreateGroupFunc describes the behavior when the
// CreateGroup method of the parent MockCategoryRepository instance is
// invoked.
type CategoryRepositoryCreateGroupFunc struct {
	defaultHook func(context.Context, *beans.CategoryGroup) error
	hooks       []func(context.Context, *beans.CategoryGroup) error
	history     []CategoryRepositoryCreateGroupFuncCall
	mutex       sync.Mutex
}

// CreateGroup delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryRepository) CreateGroup(v0 context.Context, v1 *beans.CategoryGroup) error {
	r0 := m.CreateGroupFunc.nextHook()(v0, v1)
	m.CreateGroupFunc.appendCall(CategoryRepositoryCreateGroupFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateGroup method
// of the parent MockCategoryRepository instance is invoked and the hook
// queue is empty.
func (f *CategoryRepositoryCreateGroupFunc) SetDefaultHook(hook func(context.Context, *beans.CategoryGroup) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateGroup method of the parent MockCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryRepositoryCreateGroupFunc) PushHook(hook func(context.Context, *beans.CategoryGroup) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryCreateGroupFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.CategoryGroup) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryCreateGroupFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.CategoryGroup) error {
		return r0
	})
}

func (f *CategoryRepositoryCreateGroupFunc) nextHook() func(context.Context, *beans.CategoryGroup) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryCreateGroupFunc) appendCall(r0 CategoryRepositoryCreateGroupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryCreateGroupFuncCall
// objects describing the invocations of this function.
func (f *CategoryRepositoryCreateGroupFunc) History() []CategoryRepositoryCreateGroupFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryCreateGroupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryCreateGroupFuncCall is an object that describes an
// invocation of method CreateGroup on an instance of
// MockCategoryRepository.
type CategoryRepositoryCreateGroupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.CategoryGroup
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryCreateGroupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryCreateGroupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CategoryRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockCategoryRepository instance is
// invoked.
type CategoryRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Category, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Category, error)
	history     []CategoryRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Category, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(CategoryRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockCategoryRepository instance is invoked and the hook
// queue is empty.
func (f *CategoryRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Category, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Category, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Category, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Category, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Category, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Category, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Category, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGetForBudgetFunc) appendCall(r0 CategoryRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryGetForBudgetFuncCall
// objects describing the invocations of this function.
func (f *CategoryRepositoryGetForBudgetFunc) History() []CategoryRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of
// MockCategoryRepository.
type CategoryRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Category
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryRepositoryGetGroupsForBudgetFunc describes the behavior when the
// GetGroupsForBudget method of the parent MockCategoryRepository instance
// is invoked.
type CategoryRepositoryGetGroupsForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)
	history     []CategoryRepositoryGetGroupsForBudgetFuncCall
	mutex       sync.Mutex
}

// GetGroupsForBudget delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCategoryRepository) GetGroupsForBudget(v0 context.Context, v1 beans.ID) ([]*beans.CategoryGroup, error) {
	r0, r1 := m.GetGroupsForBudgetFunc.nextHook()(v0, v1)
	m.GetGroupsForBudgetFunc.appendCall(CategoryRepositoryGetGroupsForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetGroupsForBudget
// method of the parent MockCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGroupsForBudget method of the parent MockCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.CategoryGroup, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) SetDefaultReturn(r0 []*beans.CategoryGroup, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) PushReturn(r0 []*beans.CategoryGroup, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGetGroupsForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.CategoryGroup, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGetGroupsForBudgetFunc) appendCall(r0 CategoryRepositoryGetGroupsForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CategoryRepositoryGetGroupsForBudgetFuncCall objects describing the
// invocations of this function.
func (f *CategoryRepositoryGetGroupsForBudgetFunc) History() []CategoryRepositoryGetGroupsForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGetGroupsForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGetGroupsForBudgetFuncCall is an object that describes
// an invocation of method GetGroupsForBudget on an instance of
// MockCategoryRepository.
type CategoryRepositoryGetGroupsForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.CategoryGroup
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGetGroupsForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGetGroupsForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryRepositoryGetSingleForBudgetFunc describes the behavior when the
// GetSingleForBudget method of the parent MockCategoryRepository instance
// is invoked.
type CategoryRepositoryGetSingleForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID) (*beans.Category, error)
	hooks       []func(context.Context, beans.ID, beans.ID) (*beans.Category, error)
	history     []CategoryRepositoryGetSingleForBudgetFuncCall
	mutex       sync.Mutex
}

// GetSingleForBudget delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCategoryRepository) GetSingleForBudget(v0 context.Context, v1 beans.ID, v2 beans.ID) (*beans.Category, error) {
	r0, r1 := m.GetSingleForBudgetFunc.nextHook()(v0, v1, v2)
	m.GetSingleForBudgetFunc.appendCall(CategoryRepositoryGetSingleForBudgetFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSingleForBudget
// method of the parent MockCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *CategoryRepositoryGetSingleForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID) (*beans.Category, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSingleForBudget method of the parent MockCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CategoryRepositoryGetSingleForBudgetFunc) PushHook(hook func(context.Context, beans.ID, beans.ID) (*beans.Category, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGetSingleForBudgetFunc) SetDefaultReturn(r0 *beans.Category, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGetSingleForBudgetFunc) PushReturn(r0 *beans.Category, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGetSingleForBudgetFunc) nextHook() func(context.Context, beans.ID, beans.ID) (*beans.Category, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGetSingleForBudgetFunc) appendCall(r0 CategoryRepositoryGetSingleForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CategoryRepositoryGetSingleForBudgetFuncCall objects describing the
// invocations of this function.
func (f *CategoryRepositoryGetSingleForBudgetFunc) History() []CategoryRepositoryGetSingleForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGetSingleForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGetSingleForBudgetFuncCall is an object that describes
// an invocation of method GetSingleForBudget on an instance of
// MockCategoryRepository.
type CategoryRepositoryGetSingleForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Category
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGetSingleForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGetSingleForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryRepositoryGroupExistsFunc describes the behavior when the
// GroupExists method of the parent MockCategoryRepository instance is
// invoked.
type CategoryRepositoryGroupExistsFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID) (bool, error)
	hooks       []func(context.Context, beans.ID, beans.ID) (bool, error)
	history     []CategoryRepositoryGroupExistsFuncCall
	mutex       sync.Mutex
}

// GroupExists delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryRepository) GroupExists(v0 context.Context, v1 beans.ID, v2 beans.ID) (bool, error) {
	r0, r1 := m.GroupExistsFunc.nextHook()(v0, v1, v2)
	m.GroupExistsFunc.appendCall(CategoryRepositoryGroupExistsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GroupExists method
// of the parent MockCategoryRepository instance is invoked and the hook
// queue is empty.
func (f *CategoryRepositoryGroupExistsFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GroupExists method of the parent MockCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryRepositoryGroupExistsFunc) PushHook(hook func(context.Context, beans.ID, beans.ID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryRepositoryGroupExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryRepositoryGroupExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID) (bool, error) {
		return r0, r1
	})
}

func (f *CategoryRepositoryGroupExistsFunc) nextHook() func(context.Context, beans.ID, beans.ID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryRepositoryGroupExistsFunc) appendCall(r0 CategoryRepositoryGroupExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryRepositoryGroupExistsFuncCall
// objects describing the invocations of this function.
func (f *CategoryRepositoryGroupExistsFunc) History() []CategoryRepositoryGroupExistsFuncCall {
	f.mutex.Lock()
	history := make([]CategoryRepositoryGroupExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryRepositoryGroupExistsFuncCall is an object that describes an
// invocation of method GroupExists on an instance of
// MockCategoryRepository.
type CategoryRepositoryGroupExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryRepositoryGroupExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryRepositoryGroupExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockCategoryService is a mock implementation of the CategoryService
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockCategoryService struct {
	// CreateCategoryFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCategory.
	CreateCategoryFunc *CategoryServiceCreateCategoryFunc
	// CreateGroupFunc is an instance of a mock function object controlling
	// the behavior of the method CreateGroup.
	CreateGroupFunc *CategoryServiceCreateGroupFunc
}

// NewMockCategoryService creates a new mock of the CategoryService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockCategoryService() *MockCategoryService {
	return &MockCategoryService{
		CreateCategoryFunc: &CategoryServiceCreateCategoryFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID, beans.Name) (r0 *beans.Category, r1 error) {
				return
			},
		},
		CreateGroupFunc: &CategoryServiceCreateGroupFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name) (r0 *beans.CategoryGroup, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockCategoryService creates a new mock of the CategoryService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockCategoryService() *MockCategoryService {
	return &MockCategoryService{
		CreateCategoryFunc: &CategoryServiceCreateCategoryFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error) {
				panic("unexpected invocation of MockCategoryService.CreateCategory")
			},
		},
		CreateGroupFunc: &CategoryServiceCreateGroupFunc{
			defaultHook: func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error) {
				panic("unexpected invocation of MockCategoryService.CreateGroup")
			},
		},
	}
}

// NewMockCategoryServiceFrom creates a new mock of the MockCategoryService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockCategoryServiceFrom(i beans.CategoryService) *MockCategoryService {
	return &MockCategoryService{
		CreateCategoryFunc: &CategoryServiceCreateCategoryFunc{
			defaultHook: i.CreateCategory,
		},
		CreateGroupFunc: &CategoryServiceCreateGroupFunc{
			defaultHook: i.CreateGroup,
		},
	}
}

// CategoryServiceCreateCategoryFunc describes the behavior when the
// CreateCategory method of the parent MockCategoryService instance is
// invoked.
type CategoryServiceCreateCategoryFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error)
	hooks       []func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error)
	history     []CategoryServiceCreateCategoryFuncCall
	mutex       sync.Mutex
}

// CreateCategory delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCategoryService) CreateCategory(v0 context.Context, v1 beans.ID, v2 beans.ID, v3 beans.Name) (*beans.Category, error) {
	r0, r1 := m.CreateCategoryFunc.nextHook()(v0, v1, v2, v3)
	m.CreateCategoryFunc.appendCall(CategoryServiceCreateCategoryFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateCategory
// method of the parent MockCategoryService instance is invoked and the hook
// queue is empty.
func (f *CategoryServiceCreateCategoryFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCategory method of the parent MockCategoryService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CategoryServiceCreateCategoryFunc) PushHook(hook func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryServiceCreateCategoryFunc) SetDefaultReturn(r0 *beans.Category, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryServiceCreateCategoryFunc) PushReturn(r0 *beans.Category, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error) {
		return r0, r1
	})
}

func (f *CategoryServiceCreateCategoryFunc) nextHook() func(context.Context, beans.ID, beans.ID, beans.Name) (*beans.Category, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryServiceCreateCategoryFunc) appendCall(r0 CategoryServiceCreateCategoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryServiceCreateCategoryFuncCall
// objects describing the invocations of this function.
func (f *CategoryServiceCreateCategoryFunc) History() []CategoryServiceCreateCategoryFuncCall {
	f.mutex.Lock()
	history := make([]CategoryServiceCreateCategoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryServiceCreateCategoryFuncCall is an object that describes an
// invocation of method CreateCategory on an instance of
// MockCategoryService.
type CategoryServiceCreateCategoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Category
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryServiceCreateCategoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryServiceCreateCategoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CategoryServiceCreateGroupFunc describes the behavior when the
// CreateGroup method of the parent MockCategoryService instance is invoked.
type CategoryServiceCreateGroupFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error)
	hooks       []func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error)
	history     []CategoryServiceCreateGroupFuncCall
	mutex       sync.Mutex
}

// CreateGroup delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCategoryService) CreateGroup(v0 context.Context, v1 beans.ID, v2 beans.Name) (*beans.CategoryGroup, error) {
	r0, r1 := m.CreateGroupFunc.nextHook()(v0, v1, v2)
	m.CreateGroupFunc.appendCall(CategoryServiceCreateGroupFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateGroup method
// of the parent MockCategoryService instance is invoked and the hook queue
// is empty.
func (f *CategoryServiceCreateGroupFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateGroup method of the parent MockCategoryService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CategoryServiceCreateGroupFunc) PushHook(hook func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CategoryServiceCreateGroupFunc) SetDefaultReturn(r0 *beans.CategoryGroup, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CategoryServiceCreateGroupFunc) PushReturn(r0 *beans.CategoryGroup, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error) {
		return r0, r1
	})
}

func (f *CategoryServiceCreateGroupFunc) nextHook() func(context.Context, beans.ID, beans.Name) (*beans.CategoryGroup, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CategoryServiceCreateGroupFunc) appendCall(r0 CategoryServiceCreateGroupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CategoryServiceCreateGroupFuncCall objects
// describing the invocations of this function.
func (f *CategoryServiceCreateGroupFunc) History() []CategoryServiceCreateGroupFuncCall {
	f.mutex.Lock()
	history := make([]CategoryServiceCreateGroupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CategoryServiceCreateGroupFuncCall is an object that describes an
// invocation of method CreateGroup on an instance of MockCategoryService.
type CategoryServiceCreateGroupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.CategoryGroup
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CategoryServiceCreateGroupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CategoryServiceCreateGroupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockCountable is a mock implementation of the Countable interface (from
// the package github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockCountable struct {
	// LengthFunc is an instance of a mock function object controlling the
	// behavior of the method Length.
	LengthFunc *CountableLengthFunc
}

// NewMockCountable creates a new mock of the Countable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() (r0 int) {
				return
			},
		},
	}
}

// NewStrictMockCountable creates a new mock of the Countable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockCountable.Length")
			},
		},
	}
}

// NewMockCountableFrom creates a new mock of the MockCountable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockCountableFrom(i beans.Countable) *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: i.Length,
		},
	}
}

// CountableLengthFunc describes the behavior when the Length method of the
// parent MockCountable instance is invoked.
type CountableLengthFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []CountableLengthFuncCall
	mutex       sync.Mutex
}

// Length delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCountable) Length() int {
	r0 := m.LengthFunc.nextHook()()
	m.LengthFunc.appendCall(CountableLengthFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Length method of the
// parent MockCountable instance is invoked and the hook queue is empty.
func (f *CountableLengthFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Length method of the parent MockCountable instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CountableLengthFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CountableLengthFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CountableLengthFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *CountableLengthFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CountableLengthFunc) appendCall(r0 CountableLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CountableLengthFuncCall objects describing
// the invocations of this function.
func (f *CountableLengthFunc) History() []CountableLengthFuncCall {
	f.mutex.Lock()
	history := make([]CountableLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CountableLengthFuncCall is an object that describes an invocation of
// method Length on an instance of MockCountable.
type CountableLengthFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CountableLengthFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CountableLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockEmptiable is a mock implementation of the Emptiable interface (from
// the package github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockEmptiable struct {
	// EmptyFunc is an instance of a mock function object controlling the
	// behavior of the method Empty.
	EmptyFunc *EmptiableEmptyFunc
}

// NewMockEmptiable creates a new mock of the Emptiable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
	}
}

// NewStrictMockEmptiable creates a new mock of the Emptiable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockEmptiable.Empty")
			},
		},
	}
}

// NewMockEmptiableFrom creates a new mock of the MockEmptiable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockEmptiableFrom(i beans.Emptiable) *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: i.Empty,
		},
	}
}

// EmptiableEmptyFunc describes the behavior when the Empty method of the
// parent MockEmptiable instance is invoked.
type EmptiableEmptyFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []EmptiableEmptyFuncCall
	mutex       sync.Mutex
}

// Empty delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEmptiable) Empty() bool {
	r0 := m.EmptyFunc.nextHook()()
	m.EmptyFunc.appendCall(EmptiableEmptyFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Empty method of the
// parent MockEmptiable instance is invoked and the hook queue is empty.
func (f *EmptiableEmptyFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Empty method of the parent MockEmptiable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *EmptiableEmptyFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EmptiableEmptyFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EmptiableEmptyFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *EmptiableEmptyFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EmptiableEmptyFunc) appendCall(r0 EmptiableEmptyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EmptiableEmptyFuncCall objects describing
// the invocations of this function.
func (f *EmptiableEmptyFunc) History() []EmptiableEmptyFuncCall {
	f.mutex.Lock()
	history := make([]EmptiableEmptyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EmptiableEmptyFuncCall is an object that describes an invocation of
// method Empty on an instance of MockEmptiable.
type EmptiableEmptyFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EmptiableEmptyFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EmptiableEmptyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockError is a mock implementation of the Error interface (from the
// package github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockError struct {
	// BeansErrorFunc is an instance of a mock function object controlling
	// the behavior of the method BeansError.
	BeansErrorFunc *ErrorBeansErrorFunc
	// ErrorFunc is an instance of a mock function object controlling the
	// behavior of the method Error.
	ErrorFunc *ErrorErrorFunc
}

// NewMockError creates a new mock of the Error interface. All methods
// return zero values for all results, unless overwritten.
func NewMockError() *MockError {
	return &MockError{
		BeansErrorFunc: &ErrorBeansErrorFunc{
			defaultHook: func() (r0 string, r1 string) {
				return
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
	}
}

// NewStrictMockError creates a new mock of the Error interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockError() *MockError {
	return &MockError{
		BeansErrorFunc: &ErrorBeansErrorFunc{
			defaultHook: func() (string, string) {
				panic("unexpected invocation of MockError.BeansError")
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockError.Error")
			},
		},
	}
}

// NewMockErrorFrom creates a new mock of the MockError interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockErrorFrom(i beans.Error) *MockError {
	return &MockError{
		BeansErrorFunc: &ErrorBeansErrorFunc{
			defaultHook: i.BeansError,
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: i.Error,
		},
	}
}

// ErrorBeansErrorFunc describes the behavior when the BeansError method of
// the parent MockError instance is invoked.
type ErrorBeansErrorFunc struct {
	defaultHook func() (string, string)
	hooks       []func() (string, string)
	history     []ErrorBeansErrorFuncCall
	mutex       sync.Mutex
}

// BeansError delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockError) BeansError() (string, string) {
	r0, r1 := m.BeansErrorFunc.nextHook()()
	m.BeansErrorFunc.appendCall(ErrorBeansErrorFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BeansError method of
// the parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorBeansErrorFunc) SetDefaultHook(hook func() (string, string)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BeansError method of the parent MockError instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ErrorBeansErrorFunc) PushHook(hook func() (string, string)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorBeansErrorFunc) SetDefaultReturn(r0 string, r1 string) {
	f.SetDefaultHook(func() (string, string) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorBeansErrorFunc) PushReturn(r0 string, r1 string) {
	f.PushHook(func() (string, string) {
		return r0, r1
	})
}

func (f *ErrorBeansErrorFunc) nextHook() func() (string, string) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorBeansErrorFunc) appendCall(r0 ErrorBeansErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorBeansErrorFuncCall objects describing
// the invocations of this function.
func (f *ErrorBeansErrorFunc) History() []ErrorBeansErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorBeansErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorBeansErrorFuncCall is an object that describes an invocation of
// method BeansError on an instance of MockError.
type ErrorBeansErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorBeansErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorBeansErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ErrorErrorFunc describes the behavior when the Error method of the parent
// MockError instance is invoked.
type ErrorErrorFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []ErrorErrorFuncCall
	mutex       sync.Mutex
}

// Error delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockError) Error() string {
	r0 := m.ErrorFunc.nextHook()()
	m.ErrorFunc.appendCall(ErrorErrorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Error method of the
// parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorErrorFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Error method of the parent MockError instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ErrorErrorFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorErrorFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorErrorFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *ErrorErrorFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorErrorFunc) appendCall(r0 ErrorErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorErrorFuncCall objects describing the
// invocations of this function.
func (f *ErrorErrorFunc) History() []ErrorErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorErrorFuncCall is an object that describes an invocation of method
// Error on an instance of MockError.
type ErrorErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockMonthCategoryRepository is a mock implementation of the
// MonthCategoryRepository interface (from the package
// github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockMonthCategoryRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *MonthCategoryRepositoryCreateFunc
	// GetByMonthAndCategoryFunc is an instance of a mock function object
	// controlling the behavior of the method GetByMonthAndCategory.
	GetByMonthAndCategoryFunc *MonthCategoryRepositoryGetByMonthAndCategoryFunc
	// GetForMonthFunc is an instance of a mock function object controlling
	// the behavior of the method GetForMonth.
	GetForMonthFunc *MonthCategoryRepositoryGetForMonthFunc
	// UpdateAmountFunc is an instance of a mock function object controlling
	// the behavior of the method UpdateAmount.
	UpdateAmountFunc *MonthCategoryRepositoryUpdateAmountFunc
}

// NewMockMonthCategoryRepository creates a new mock of the
// MonthCategoryRepository interface. All methods return zero values for all
// results, unless overwritten.
func NewMockMonthCategoryRepository() *MockMonthCategoryRepository {
	return &MockMonthCategoryRepository{
		CreateFunc: &MonthCategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.MonthCategory) (r0 error) {
				return
			},
		},
		GetByMonthAndCategoryFunc: &MonthCategoryRepositoryGetByMonthAndCategoryFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (r0 *beans.MonthCategory, r1 error) {
				return
			},
		},
		GetForMonthFunc: &MonthCategoryRepositoryGetForMonthFunc{
			defaultHook: func(context.Context, beans.Month) (r0 []*beans.MonthCategory, r1 error) {
				return
			},
		},
		UpdateAmountFunc: &MonthCategoryRepositoryUpdateAmountFunc{
			defaultHook: func(context.Context, beans.ID, beans.Amount) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockMonthCategoryRepository creates a new mock of the
// MonthCategoryRepository interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockMonthCategoryRepository() *MockMonthCategoryRepository {
	return &MockMonthCategoryRepository{
		CreateFunc: &MonthCategoryRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.MonthCategory) error {
				panic("unexpected invocation of MockMonthCategoryRepository.Create")
			},
		},
		GetByMonthAndCategoryFunc: &MonthCategoryRepositoryGetByMonthAndCategoryFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error) {
				panic("unexpected invocation of MockMonthCategoryRepository.GetByMonthAndCategory")
			},
		},
		GetForMonthFunc: &MonthCategoryRepositoryGetForMonthFunc{
			defaultHook: func(context.Context, beans.Month) ([]*beans.MonthCategory, error) {
				panic("unexpected invocation of MockMonthCategoryRepository.GetForMonth")
			},
		},
		UpdateAmountFunc: &MonthCategoryRepositoryUpdateAmountFunc{
			defaultHook: func(context.Context, beans.ID, beans.Amount) error {
				panic("unexpected invocation of MockMonthCategoryRepository.UpdateAmount")
			},
		},
	}
}

// NewMockMonthCategoryRepositoryFrom creates a new mock of the
// MockMonthCategoryRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockMonthCategoryRepositoryFrom(i beans.MonthCategoryRepository) *MockMonthCategoryRepository {
	return &MockMonthCategoryRepository{
		CreateFunc: &MonthCategoryRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetByMonthAndCategoryFunc: &MonthCategoryRepositoryGetByMonthAndCategoryFunc{
			defaultHook: i.GetByMonthAndCategory,
		},
		GetForMonthFunc: &MonthCategoryRepositoryGetForMonthFunc{
			defaultHook: i.GetForMonth,
		},
		UpdateAmountFunc: &MonthCategoryRepositoryUpdateAmountFunc{
			defaultHook: i.UpdateAmount,
		},
	}
}

// MonthCategoryRepositoryCreateFunc describes the behavior when the Create
// method of the parent MockMonthCategoryRepository instance is invoked.
type MonthCategoryRepositoryCreateFunc struct {
	defaultHook func(context.Context, *beans.MonthCategory) error
	hooks       []func(context.Context, *beans.MonthCategory) error
	history     []MonthCategoryRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) Create(v0 context.Context, v1 *beans.MonthCategory) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(MonthCategoryRepositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockMonthCategoryRepository instance is invoked and the hook queue
// is empty.
func (f *MonthCategoryRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, *beans.MonthCategory) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockMonthCategoryRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *MonthCategoryRepositoryCreateFunc) PushHook(hook func(context.Context, *beans.MonthCategory) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.MonthCategory) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.MonthCategory) error {
		return r0
	})
}

func (f *MonthCategoryRepositoryCreateFunc) nextHook() func(context.Context, *beans.MonthCategory) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryCreateFunc) appendCall(r0 MonthCategoryRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryRepositoryCreateFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryRepositoryCreateFunc) History() []MonthCategoryRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryCreateFuncCall is an object that describes an
// invocation of method Create on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.MonthCategory
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MonthCategoryRepositoryGetByMonthAndCategoryFunc describes the behavior
// when the GetByMonthAndCategory method of the parent
// MockMonthCategoryRepository instance is invoked.
type MonthCategoryRepositoryGetByMonthAndCategoryFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error)
	hooks       []func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error)
	history     []MonthCategoryRepositoryGetByMonthAndCategoryFuncCall
	mutex       sync.Mutex
}

// GetByMonthAndCategory delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) GetByMonthAndCategory(v0 context.Context, v1 beans.ID, v2 beans.ID) (*beans.MonthCategory, error) {
	r0, r1 := m.GetByMonthAndCategoryFunc.nextHook()(v0, v1, v2)
	m.GetByMonthAndCategoryFunc.appendCall(MonthCategoryRepositoryGetByMonthAndCategoryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetByMonthAndCategory method of the parent MockMonthCategoryRepository
// instance is invoked and the hook queue is empty.
func (f *MonthCategoryRepositoryGetByMonthAndCategoryFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByMonthAndCategory method of the parent MockMonthCategoryRepository
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *MonthCategoryRepositoryGetByMonthAndCategoryFunc) PushHook(hook func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryGetByMonthAndCategoryFunc) SetDefaultReturn(r0 *beans.MonthCategory, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryGetByMonthAndCategoryFunc) PushReturn(r0 *beans.MonthCategory, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error) {
		return r0, r1
	})
}

func (f *MonthCategoryRepositoryGetByMonthAndCategoryFunc) nextHook() func(context.Context, beans.ID, beans.ID) (*beans.MonthCategory, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryGetByMonthAndCategoryFunc) appendCall(r0 MonthCategoryRepositoryGetByMonthAndCategoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// MonthCategoryRepositoryGetByMonthAndCategoryFuncCall objects describing
// the invocations of this function.
func (f *MonthCategoryRepositoryGetByMonthAndCategoryFunc) History() []MonthCategoryRepositoryGetByMonthAndCategoryFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryGetByMonthAndCategoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryGetByMonthAndCategoryFuncCall is an object that
// describes an invocation of method GetByMonthAndCategory on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryGetByMonthAndCategoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.MonthCategory
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryGetByMonthAndCategoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryGetByMonthAndCategoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthCategoryRepositoryGetForMonthFunc describes the behavior when the
// GetForMonth method of the parent MockMonthCategoryRepository instance is
// invoked.
type MonthCategoryRepositoryGetForMonthFunc struct {
	defaultHook func(context.Context, beans.Month) ([]*beans.MonthCategory, error)
	hooks       []func(context.Context, beans.Month) ([]*beans.MonthCategory, error)
	history     []MonthCategoryRepositoryGetForMonthFuncCall
	mutex       sync.Mutex
}

// GetForMonth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) GetForMonth(v0 context.Context, v1 beans.Month) ([]*beans.MonthCategory, error) {
	r0, r1 := m.GetForMonthFunc.nextHook()(v0, v1)
	m.GetForMonthFunc.appendCall(MonthCategoryRepositoryGetForMonthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForMonth method
// of the parent MockMonthCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *MonthCategoryRepositoryGetForMonthFunc) SetDefaultHook(hook func(context.Context, beans.Month) ([]*beans.MonthCategory, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForMonth method of the parent MockMonthCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *MonthCategoryRepositoryGetForMonthFunc) PushHook(hook func(context.Context, beans.Month) ([]*beans.MonthCategory, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryGetForMonthFunc) SetDefaultReturn(r0 []*beans.MonthCategory, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Month) ([]*beans.MonthCategory, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryGetForMonthFunc) PushReturn(r0 []*beans.MonthCategory, r1 error) {
	f.PushHook(func(context.Context, beans.Month) ([]*beans.MonthCategory, error) {
		return r0, r1
	})
}

func (f *MonthCategoryRepositoryGetForMonthFunc) nextHook() func(context.Context, beans.Month) ([]*beans.MonthCategory, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryGetForMonthFunc) appendCall(r0 MonthCategoryRepositoryGetForMonthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryRepositoryGetForMonthFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryRepositoryGetForMonthFunc) History() []MonthCategoryRepositoryGetForMonthFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryGetForMonthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryGetForMonthFuncCall is an object that describes an
// invocation of method GetForMonth on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryGetForMonthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Month
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.MonthCategory
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryGetForMonthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryGetForMonthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthCategoryRepositoryUpdateAmountFunc describes the behavior when the
// UpdateAmount method of the parent MockMonthCategoryRepository instance is
// invoked.
type MonthCategoryRepositoryUpdateAmountFunc struct {
	defaultHook func(context.Context, beans.ID, beans.Amount) error
	hooks       []func(context.Context, beans.ID, beans.Amount) error
	history     []MonthCategoryRepositoryUpdateAmountFuncCall
	mutex       sync.Mutex
}

// UpdateAmount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthCategoryRepository) UpdateAmount(v0 context.Context, v1 beans.ID, v2 beans.Amount) error {
	r0 := m.UpdateAmountFunc.nextHook()(v0, v1, v2)
	m.UpdateAmountFunc.appendCall(MonthCategoryRepositoryUpdateAmountFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateAmount method
// of the parent MockMonthCategoryRepository instance is invoked and the
// hook queue is empty.
func (f *MonthCategoryRepositoryUpdateAmountFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.Amount) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateAmount method of the parent MockMonthCategoryRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *MonthCategoryRepositoryUpdateAmountFunc) PushHook(hook func(context.Context, beans.ID, beans.Amount) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryRepositoryUpdateAmountFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.Amount) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryRepositoryUpdateAmountFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.ID, beans.Amount) error {
		return r0
	})
}

func (f *MonthCategoryRepositoryUpdateAmountFunc) nextHook() func(context.Context, beans.ID, beans.Amount) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryRepositoryUpdateAmountFunc) appendCall(r0 MonthCategoryRepositoryUpdateAmountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryRepositoryUpdateAmountFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryRepositoryUpdateAmountFunc) History() []MonthCategoryRepositoryUpdateAmountFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryRepositoryUpdateAmountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryRepositoryUpdateAmountFuncCall is an object that describes
// an invocation of method UpdateAmount on an instance of
// MockMonthCategoryRepository.
type MonthCategoryRepositoryUpdateAmountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Amount
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryRepositoryUpdateAmountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryRepositoryUpdateAmountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockMonthCategoryService is a mock implementation of the
// MonthCategoryService interface (from the package
// github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockMonthCategoryService struct {
	// CreateOrUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method CreateOrUpdate.
	CreateOrUpdateFunc *MonthCategoryServiceCreateOrUpdateFunc
}

// NewMockMonthCategoryService creates a new mock of the
// MonthCategoryService interface. All methods return zero values for all
// results, unless overwritten.
func NewMockMonthCategoryService() *MockMonthCategoryService {
	return &MockMonthCategoryService{
		CreateOrUpdateFunc: &MonthCategoryServiceCreateOrUpdateFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID, beans.Amount) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockMonthCategoryService creates a new mock of the
// MonthCategoryService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockMonthCategoryService() *MockMonthCategoryService {
	return &MockMonthCategoryService{
		CreateOrUpdateFunc: &MonthCategoryServiceCreateOrUpdateFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID, beans.Amount) error {
				panic("unexpected invocation of MockMonthCategoryService.CreateOrUpdate")
			},
		},
	}
}

// NewMockMonthCategoryServiceFrom creates a new mock of the
// MockMonthCategoryService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockMonthCategoryServiceFrom(i beans.MonthCategoryService) *MockMonthCategoryService {
	return &MockMonthCategoryService{
		CreateOrUpdateFunc: &MonthCategoryServiceCreateOrUpdateFunc{
			defaultHook: i.CreateOrUpdate,
		},
	}
}

// MonthCategoryServiceCreateOrUpdateFunc describes the behavior when the
// CreateOrUpdate method of the parent MockMonthCategoryService instance is
// invoked.
type MonthCategoryServiceCreateOrUpdateFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID, beans.Amount) error
	hooks       []func(context.Context, beans.ID, beans.ID, beans.Amount) error
	history     []MonthCategoryServiceCreateOrUpdateFuncCall
	mutex       sync.Mutex
}

// CreateOrUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockMonthCategoryService) CreateOrUpdate(v0 context.Context, v1 beans.ID, v2 beans.ID, v3 beans.Amount) error {
	r0 := m.CreateOrUpdateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateOrUpdateFunc.appendCall(MonthCategoryServiceCreateOrUpdateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateOrUpdate
// method of the parent MockMonthCategoryService instance is invoked and the
// hook queue is empty.
func (f *MonthCategoryServiceCreateOrUpdateFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID, beans.Amount) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateOrUpdate method of the parent MockMonthCategoryService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *MonthCategoryServiceCreateOrUpdateFunc) PushHook(hook func(context.Context, beans.ID, beans.ID, beans.Amount) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthCategoryServiceCreateOrUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID, beans.Amount) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthCategoryServiceCreateOrUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID, beans.Amount) error {
		return r0
	})
}

func (f *MonthCategoryServiceCreateOrUpdateFunc) nextHook() func(context.Context, beans.ID, beans.ID, beans.Amount) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthCategoryServiceCreateOrUpdateFunc) appendCall(r0 MonthCategoryServiceCreateOrUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthCategoryServiceCreateOrUpdateFuncCall
// objects describing the invocations of this function.
func (f *MonthCategoryServiceCreateOrUpdateFunc) History() []MonthCategoryServiceCreateOrUpdateFuncCall {
	f.mutex.Lock()
	history := make([]MonthCategoryServiceCreateOrUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthCategoryServiceCreateOrUpdateFuncCall is an object that describes an
// invocation of method CreateOrUpdate on an instance of
// MockMonthCategoryService.
type MonthCategoryServiceCreateOrUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.Amount
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthCategoryServiceCreateOrUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthCategoryServiceCreateOrUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockMonthRepository is a mock implementation of the MonthRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockMonthRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *MonthRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *MonthRepositoryGetFunc
	// GetByDateFunc is an instance of a mock function object controlling
	// the behavior of the method GetByDate.
	GetByDateFunc *MonthRepositoryGetByDateFunc
	// GetLatestFunc is an instance of a mock function object controlling
	// the behavior of the method GetLatest.
	GetLatestFunc *MonthRepositoryGetLatestFunc
}

// NewMockMonthRepository creates a new mock of the MonthRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockMonthRepository() *MockMonthRepository {
	return &MockMonthRepository{
		CreateFunc: &MonthRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Month) (r0 error) {
				return
			},
		},
		GetFunc: &MonthRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Month, r1 error) {
				return
			},
		},
		GetByDateFunc: &MonthRepositoryGetByDateFunc{
			defaultHook: func(context.Context, beans.ID, time.Time) (r0 *beans.Month, r1 error) {
				return
			},
		},
		GetLatestFunc: &MonthRepositoryGetLatestFunc{
			defaultHook: func(context.Context, beans.ID) (r0 *beans.Month, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockMonthRepository creates a new mock of the MonthRepository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockMonthRepository() *MockMonthRepository {
	return &MockMonthRepository{
		CreateFunc: &MonthRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Month) error {
				panic("unexpected invocation of MockMonthRepository.Create")
			},
		},
		GetFunc: &MonthRepositoryGetFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Month, error) {
				panic("unexpected invocation of MockMonthRepository.Get")
			},
		},
		GetByDateFunc: &MonthRepositoryGetByDateFunc{
			defaultHook: func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
				panic("unexpected invocation of MockMonthRepository.GetByDate")
			},
		},
		GetLatestFunc: &MonthRepositoryGetLatestFunc{
			defaultHook: func(context.Context, beans.ID) (*beans.Month, error) {
				panic("unexpected invocation of MockMonthRepository.GetLatest")
			},
		},
	}
}

// NewMockMonthRepositoryFrom creates a new mock of the MockMonthRepository
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockMonthRepositoryFrom(i beans.MonthRepository) *MockMonthRepository {
	return &MockMonthRepository{
		CreateFunc: &MonthRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &MonthRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetByDateFunc: &MonthRepositoryGetByDateFunc{
			defaultHook: i.GetByDate,
		},
		GetLatestFunc: &MonthRepositoryGetLatestFunc{
			defaultHook: i.GetLatest,
		},
	}
}

// MonthRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockMonthRepository instance is invoked.
type MonthRepositoryCreateFunc struct {
	defaultHook func(context.Context, *beans.Month) error
	hooks       []func(context.Context, *beans.Month) error
	history     []MonthRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthRepository) Create(v0 context.Context, v1 *beans.Month) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(MonthRepositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockMonthRepository instance is invoked and the hook queue is
// empty.
func (f *MonthRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, *beans.Month) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockMonthRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *MonthRepositoryCreateFunc) PushHook(hook func(context.Context, *beans.Month) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.Month) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.Month) error {
		return r0
	})
}

func (f *MonthRepositoryCreateFunc) nextHook() func(context.Context, *beans.Month) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryCreateFunc) appendCall(r0 MonthRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryCreateFunc) History() []MonthRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockMonthRepository.
type MonthRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Month
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MonthRepositoryGetFunc describes the behavior when the Get method of the
// parent MockMonthRepository instance is invoked.
type MonthRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Month, error)
	hooks       []func(context.Context, beans.ID) (*beans.Month, error)
	history     []MonthRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthRepository) Get(v0 context.Context, v1 beans.ID) (*beans.Month, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(MonthRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockMonthRepository instance is invoked and the hook queue is
// empty.
func (f *MonthRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockMonthRepository instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *MonthRepositoryGetFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryGetFunc) SetDefaultReturn(r0 *beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryGetFunc) PushReturn(r0 *beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthRepositoryGetFunc) nextHook() func(context.Context, beans.ID) (*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryGetFunc) appendCall(r0 MonthRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryGetFunc) History() []MonthRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockMonthRepository.
type MonthRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthRepositoryGetByDateFunc describes the behavior when the GetByDate
// method of the parent MockMonthRepository instance is invoked.
type MonthRepositoryGetByDateFunc struct {
	defaultHook func(context.Context, beans.ID, time.Time) (*beans.Month, error)
	hooks       []func(context.Context, beans.ID, time.Time) (*beans.Month, error)
	history     []MonthRepositoryGetByDateFuncCall
	mutex       sync.Mutex
}

// GetByDate delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthRepository) GetByDate(v0 context.Context, v1 beans.ID, v2 time.Time) (*beans.Month, error) {
	r0, r1 := m.GetByDateFunc.nextHook()(v0, v1, v2)
	m.GetByDateFunc.appendCall(MonthRepositoryGetByDateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByDate method of
// the parent MockMonthRepository instance is invoked and the hook queue is
// empty.
func (f *MonthRepositoryGetByDateFunc) SetDefaultHook(hook func(context.Context, beans.ID, time.Time) (*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByDate method of the parent MockMonthRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *MonthRepositoryGetByDateFunc) PushHook(hook func(context.Context, beans.ID, time.Time) (*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryGetByDateFunc) SetDefaultReturn(r0 *beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryGetByDateFunc) PushReturn(r0 *beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthRepositoryGetByDateFunc) nextHook() func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryGetByDateFunc) appendCall(r0 MonthRepositoryGetByDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryGetByDateFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryGetByDateFunc) History() []MonthRepositoryGetByDateFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryGetByDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryGetByDateFuncCall is an object that describes an
// invocation of method GetByDate on an instance of MockMonthRepository.
type MonthRepositoryGetByDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryGetByDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryGetByDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthRepositoryGetLatestFunc describes the behavior when the GetLatest
// method of the parent MockMonthRepository instance is invoked.
type MonthRepositoryGetLatestFunc struct {
	defaultHook func(context.Context, beans.ID) (*beans.Month, error)
	hooks       []func(context.Context, beans.ID) (*beans.Month, error)
	history     []MonthRepositoryGetLatestFuncCall
	mutex       sync.Mutex
}

// GetLatest delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthRepository) GetLatest(v0 context.Context, v1 beans.ID) (*beans.Month, error) {
	r0, r1 := m.GetLatestFunc.nextHook()(v0, v1)
	m.GetLatestFunc.appendCall(MonthRepositoryGetLatestFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatest method of
// the parent MockMonthRepository instance is invoked and the hook queue is
// empty.
func (f *MonthRepositoryGetLatestFunc) SetDefaultHook(hook func(context.Context, beans.ID) (*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatest method of the parent MockMonthRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *MonthRepositoryGetLatestFunc) PushHook(hook func(context.Context, beans.ID) (*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthRepositoryGetLatestFunc) SetDefaultReturn(r0 *beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthRepositoryGetLatestFunc) PushReturn(r0 *beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthRepositoryGetLatestFunc) nextHook() func(context.Context, beans.ID) (*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthRepositoryGetLatestFunc) appendCall(r0 MonthRepositoryGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthRepositoryGetLatestFuncCall objects
// describing the invocations of this function.
func (f *MonthRepositoryGetLatestFunc) History() []MonthRepositoryGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]MonthRepositoryGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthRepositoryGetLatestFuncCall is an object that describes an
// invocation of method GetLatest on an instance of MockMonthRepository.
type MonthRepositoryGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthRepositoryGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthRepositoryGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockMonthService is a mock implementation of the MonthService interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockMonthService struct {
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *MonthServiceGetFunc
	// GetOrCreateFunc is an instance of a mock function object controlling
	// the behavior of the method GetOrCreate.
	GetOrCreateFunc *MonthServiceGetOrCreateFunc
}

// NewMockMonthService creates a new mock of the MonthService interface. All
// methods return zero values for all results, unless overwritten.
func NewMockMonthService() *MockMonthService {
	return &MockMonthService{
		GetFunc: &MonthServiceGetFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (r0 *beans.Month, r1 error) {
				return
			},
		},
		GetOrCreateFunc: &MonthServiceGetOrCreateFunc{
			defaultHook: func(context.Context, beans.ID, time.Time) (r0 *beans.Month, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockMonthService creates a new mock of the MonthService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockMonthService() *MockMonthService {
	return &MockMonthService{
		GetFunc: &MonthServiceGetFunc{
			defaultHook: func(context.Context, beans.ID, beans.ID) (*beans.Month, error) {
				panic("unexpected invocation of MockMonthService.Get")
			},
		},
		GetOrCreateFunc: &MonthServiceGetOrCreateFunc{
			defaultHook: func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
				panic("unexpected invocation of MockMonthService.GetOrCreate")
			},
		},
	}
}

// NewMockMonthServiceFrom creates a new mock of the MockMonthService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockMonthServiceFrom(i beans.MonthService) *MockMonthService {
	return &MockMonthService{
		GetFunc: &MonthServiceGetFunc{
			defaultHook: i.Get,
		},
		GetOrCreateFunc: &MonthServiceGetOrCreateFunc{
			defaultHook: i.GetOrCreate,
		},
	}
}

// MonthServiceGetFunc describes the behavior when the Get method of the
// parent MockMonthService instance is invoked.
type MonthServiceGetFunc struct {
	defaultHook func(context.Context, beans.ID, beans.ID) (*beans.Month, error)
	hooks       []func(context.Context, beans.ID, beans.ID) (*beans.Month, error)
	history     []MonthServiceGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockMonthService) Get(v0 context.Context, v1 beans.ID, v2 beans.ID) (*beans.Month, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1, v2)
	m.GetFunc.appendCall(MonthServiceGetFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockMonthService instance is invoked and the hook queue is empty.
func (f *MonthServiceGetFunc) SetDefaultHook(hook func(context.Context, beans.ID, beans.ID) (*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockMonthService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *MonthServiceGetFunc) PushHook(hook func(context.Context, beans.ID, beans.ID) (*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthServiceGetFunc) SetDefaultReturn(r0 *beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthServiceGetFunc) PushReturn(r0 *beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.ID, beans.ID) (*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthServiceGetFunc) nextHook() func(context.Context, beans.ID, beans.ID) (*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthServiceGetFunc) appendCall(r0 MonthServiceGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthServiceGetFuncCall objects describing
// the invocations of this function.
func (f *MonthServiceGetFunc) History() []MonthServiceGetFuncCall {
	f.mutex.Lock()
	history := make([]MonthServiceGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthServiceGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockMonthService.
type MonthServiceGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthServiceGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthServiceGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MonthServiceGetOrCreateFunc describes the behavior when the GetOrCreate
// method of the parent MockMonthService instance is invoked.
type MonthServiceGetOrCreateFunc struct {
	defaultHook func(context.Context, beans.ID, time.Time) (*beans.Month, error)
	hooks       []func(context.Context, beans.ID, time.Time) (*beans.Month, error)
	history     []MonthServiceGetOrCreateFuncCall
	mutex       sync.Mutex
}

// GetOrCreate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockMonthService) GetOrCreate(v0 context.Context, v1 beans.ID, v2 time.Time) (*beans.Month, error) {
	r0, r1 := m.GetOrCreateFunc.nextHook()(v0, v1, v2)
	m.GetOrCreateFunc.appendCall(MonthServiceGetOrCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOrCreate method
// of the parent MockMonthService instance is invoked and the hook queue is
// empty.
func (f *MonthServiceGetOrCreateFunc) SetDefaultHook(hook func(context.Context, beans.ID, time.Time) (*beans.Month, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrCreate method of the parent MockMonthService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *MonthServiceGetOrCreateFunc) PushHook(hook func(context.Context, beans.ID, time.Time) (*beans.Month, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *MonthServiceGetOrCreateFunc) SetDefaultReturn(r0 *beans.Month, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *MonthServiceGetOrCreateFunc) PushReturn(r0 *beans.Month, r1 error) {
	f.PushHook(func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
		return r0, r1
	})
}

func (f *MonthServiceGetOrCreateFunc) nextHook() func(context.Context, beans.ID, time.Time) (*beans.Month, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MonthServiceGetOrCreateFunc) appendCall(r0 MonthServiceGetOrCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MonthServiceGetOrCreateFuncCall objects
// describing the invocations of this function.
func (f *MonthServiceGetOrCreateFunc) History() []MonthServiceGetOrCreateFuncCall {
	f.mutex.Lock()
	history := make([]MonthServiceGetOrCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MonthServiceGetOrCreateFuncCall is an object that describes an invocation
// of method GetOrCreate on an instance of MockMonthService.
type MonthServiceGetOrCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Month
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MonthServiceGetOrCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MonthServiceGetOrCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSessionRepository is a mock implementation of the SessionRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockSessionRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *SessionRepositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *SessionRepositoryGetFunc
}

// NewMockSessionRepository creates a new mock of the SessionRepository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSessionRepository() *MockSessionRepository {
	return &MockSessionRepository{
		CreateFunc: &SessionRepositoryCreateFunc{
			defaultHook: func(beans.UserID) (r0 *beans.Session, r1 error) {
				return
			},
		},
		GetFunc: &SessionRepositoryGetFunc{
			defaultHook: func(beans.SessionID) (r0 *beans.Session, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSessionRepository creates a new mock of the
// SessionRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSessionRepository() *MockSessionRepository {
	return &MockSessionRepository{
		CreateFunc: &SessionRepositoryCreateFunc{
			defaultHook: func(beans.UserID) (*beans.Session, error) {
				panic("unexpected invocation of MockSessionRepository.Create")
			},
		},
		GetFunc: &SessionRepositoryGetFunc{
			defaultHook: func(beans.SessionID) (*beans.Session, error) {
				panic("unexpected invocation of MockSessionRepository.Get")
			},
		},
	}
}

// NewMockSessionRepositoryFrom creates a new mock of the
// MockSessionRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSessionRepositoryFrom(i beans.SessionRepository) *MockSessionRepository {
	return &MockSessionRepository{
		CreateFunc: &SessionRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &SessionRepositoryGetFunc{
			defaultHook: i.Get,
		},
	}
}

// SessionRepositoryCreateFunc describes the behavior when the Create method
// of the parent MockSessionRepository instance is invoked.
type SessionRepositoryCreateFunc struct {
	defaultHook func(beans.UserID) (*beans.Session, error)
	hooks       []func(beans.UserID) (*beans.Session, error)
	history     []SessionRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSessionRepository) Create(v0 beans.UserID) (*beans.Session, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0)
	m.CreateFunc.appendCall(SessionRepositoryCreateFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockSessionRepository instance is invoked and the hook queue is
// empty.
func (f *SessionRepositoryCreateFunc) SetDefaultHook(hook func(beans.UserID) (*beans.Session, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockSessionRepository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SessionRepositoryCreateFunc) PushHook(hook func(beans.UserID) (*beans.Session, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SessionRepositoryCreateFunc) SetDefaultReturn(r0 *beans.Session, r1 error) {
	f.SetDefaultHook(func(beans.UserID) (*beans.Session, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SessionRepositoryCreateFunc) PushReturn(r0 *beans.Session, r1 error) {
	f.PushHook(func(beans.UserID) (*beans.Session, error) {
		return r0, r1
	})
}

func (f *SessionRepositoryCreateFunc) nextHook() func(beans.UserID) (*beans.Session, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SessionRepositoryCreateFunc) appendCall(r0 SessionRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SessionRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *SessionRepositoryCreateFunc) History() []SessionRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]SessionRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SessionRepositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockSessionRepository.
type SessionRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 beans.UserID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Session
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SessionRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SessionRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SessionRepositoryGetFunc describes the behavior when the Get method of
// the parent MockSessionRepository instance is invoked.
type SessionRepositoryGetFunc struct {
	defaultHook func(beans.SessionID) (*beans.Session, error)
	hooks       []func(beans.SessionID) (*beans.Session, error)
	history     []SessionRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSessionRepository) Get(v0 beans.SessionID) (*beans.Session, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(SessionRepositoryGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockSessionRepository instance is invoked and the hook queue is
// empty.
func (f *SessionRepositoryGetFunc) SetDefaultHook(hook func(beans.SessionID) (*beans.Session, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockSessionRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SessionRepositoryGetFunc) PushHook(hook func(beans.SessionID) (*beans.Session, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SessionRepositoryGetFunc) SetDefaultReturn(r0 *beans.Session, r1 error) {
	f.SetDefaultHook(func(beans.SessionID) (*beans.Session, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SessionRepositoryGetFunc) PushReturn(r0 *beans.Session, r1 error) {
	f.PushHook(func(beans.SessionID) (*beans.Session, error) {
		return r0, r1
	})
}

func (f *SessionRepositoryGetFunc) nextHook() func(beans.SessionID) (*beans.Session, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SessionRepositoryGetFunc) appendCall(r0 SessionRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SessionRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *SessionRepositoryGetFunc) History() []SessionRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]SessionRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SessionRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockSessionRepository.
type SessionRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 beans.SessionID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Session
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SessionRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SessionRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockTransactionRepository is a mock implementation of the
// TransactionRepository interface (from the package
// github.com/bradenrayhorn/beans/beans) used for unit testing.
type MockTransactionRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *TransactionRepositoryCreateFunc
	// GetForBudgetFunc is an instance of a mock function object controlling
	// the behavior of the method GetForBudget.
	GetForBudgetFunc *TransactionRepositoryGetForBudgetFunc
}

// NewMockTransactionRepository creates a new mock of the
// TransactionRepository interface. All methods return zero values for all
// results, unless overwritten.
func NewMockTransactionRepository() *MockTransactionRepository {
	return &MockTransactionRepository{
		CreateFunc: &TransactionRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Transaction) (r0 error) {
				return
			},
		},
		GetForBudgetFunc: &TransactionRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) (r0 []*beans.Transaction, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockTransactionRepository creates a new mock of the
// TransactionRepository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockTransactionRepository() *MockTransactionRepository {
	return &MockTransactionRepository{
		CreateFunc: &TransactionRepositoryCreateFunc{
			defaultHook: func(context.Context, *beans.Transaction) error {
				panic("unexpected invocation of MockTransactionRepository.Create")
			},
		},
		GetForBudgetFunc: &TransactionRepositoryGetForBudgetFunc{
			defaultHook: func(context.Context, beans.ID) ([]*beans.Transaction, error) {
				panic("unexpected invocation of MockTransactionRepository.GetForBudget")
			},
		},
	}
}

// NewMockTransactionRepositoryFrom creates a new mock of the
// MockTransactionRepository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockTransactionRepositoryFrom(i beans.TransactionRepository) *MockTransactionRepository {
	return &MockTransactionRepository{
		CreateFunc: &TransactionRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetForBudgetFunc: &TransactionRepositoryGetForBudgetFunc{
			defaultHook: i.GetForBudget,
		},
	}
}

// TransactionRepositoryCreateFunc describes the behavior when the Create
// method of the parent MockTransactionRepository instance is invoked.
type TransactionRepositoryCreateFunc struct {
	defaultHook func(context.Context, *beans.Transaction) error
	hooks       []func(context.Context, *beans.Transaction) error
	history     []TransactionRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionRepository) Create(v0 context.Context, v1 *beans.Transaction) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(TransactionRepositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockTransactionRepository instance is invoked and the hook queue
// is empty.
func (f *TransactionRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, *beans.Transaction) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockTransactionRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TransactionRepositoryCreateFunc) PushHook(hook func(context.Context, *beans.Transaction) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *beans.Transaction) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *beans.Transaction) error {
		return r0
	})
}

func (f *TransactionRepositoryCreateFunc) nextHook() func(context.Context, *beans.Transaction) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionRepositoryCreateFunc) appendCall(r0 TransactionRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *TransactionRepositoryCreateFunc) History() []TransactionRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]TransactionRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionRepositoryCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockTransactionRepository.
type TransactionRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TransactionRepositoryGetForBudgetFunc describes the behavior when the
// GetForBudget method of the parent MockTransactionRepository instance is
// invoked.
type TransactionRepositoryGetForBudgetFunc struct {
	defaultHook func(context.Context, beans.ID) ([]*beans.Transaction, error)
	hooks       []func(context.Context, beans.ID) ([]*beans.Transaction, error)
	history     []TransactionRepositoryGetForBudgetFuncCall
	mutex       sync.Mutex
}

// GetForBudget delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTransactionRepository) GetForBudget(v0 context.Context, v1 beans.ID) ([]*beans.Transaction, error) {
	r0, r1 := m.GetForBudgetFunc.nextHook()(v0, v1)
	m.GetForBudgetFunc.appendCall(TransactionRepositoryGetForBudgetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetForBudget method
// of the parent MockTransactionRepository instance is invoked and the hook
// queue is empty.
func (f *TransactionRepositoryGetForBudgetFunc) SetDefaultHook(hook func(context.Context, beans.ID) ([]*beans.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetForBudget method of the parent MockTransactionRepository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *TransactionRepositoryGetForBudgetFunc) PushHook(hook func(context.Context, beans.ID) ([]*beans.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionRepositoryGetForBudgetFunc) SetDefaultReturn(r0 []*beans.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.ID) ([]*beans.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionRepositoryGetForBudgetFunc) PushReturn(r0 []*beans.Transaction, r1 error) {
	f.PushHook(func(context.Context, beans.ID) ([]*beans.Transaction, error) {
		return r0, r1
	})
}

func (f *TransactionRepositoryGetForBudgetFunc) nextHook() func(context.Context, beans.ID) ([]*beans.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionRepositoryGetForBudgetFunc) appendCall(r0 TransactionRepositoryGetForBudgetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionRepositoryGetForBudgetFuncCall
// objects describing the invocations of this function.
func (f *TransactionRepositoryGetForBudgetFunc) History() []TransactionRepositoryGetForBudgetFuncCall {
	f.mutex.Lock()
	history := make([]TransactionRepositoryGetForBudgetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionRepositoryGetForBudgetFuncCall is an object that describes an
// invocation of method GetForBudget on an instance of
// MockTransactionRepository.
type TransactionRepositoryGetForBudgetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*beans.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionRepositoryGetForBudgetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionRepositoryGetForBudgetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockTransactionService is a mock implementation of the TransactionService
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockTransactionService struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *TransactionServiceCreateFunc
}

// NewMockTransactionService creates a new mock of the TransactionService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockTransactionService() *MockTransactionService {
	return &MockTransactionService{
		CreateFunc: &TransactionServiceCreateFunc{
			defaultHook: func(context.Context, *beans.Budget, beans.TransactionCreate) (r0 *beans.Transaction, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockTransactionService creates a new mock of the
// TransactionService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockTransactionService() *MockTransactionService {
	return &MockTransactionService{
		CreateFunc: &TransactionServiceCreateFunc{
			defaultHook: func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error) {
				panic("unexpected invocation of MockTransactionService.Create")
			},
		},
	}
}

// NewMockTransactionServiceFrom creates a new mock of the
// MockTransactionService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockTransactionServiceFrom(i beans.TransactionService) *MockTransactionService {
	return &MockTransactionService{
		CreateFunc: &TransactionServiceCreateFunc{
			defaultHook: i.Create,
		},
	}
}

// TransactionServiceCreateFunc describes the behavior when the Create
// method of the parent MockTransactionService instance is invoked.
type TransactionServiceCreateFunc struct {
	defaultHook func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error)
	hooks       []func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error)
	history     []TransactionServiceCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTransactionService) Create(v0 context.Context, v1 *beans.Budget, v2 beans.TransactionCreate) (*beans.Transaction, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(TransactionServiceCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockTransactionService instance is invoked and the hook queue is
// empty.
func (f *TransactionServiceCreateFunc) SetDefaultHook(hook func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockTransactionService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TransactionServiceCreateFunc) PushHook(hook func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TransactionServiceCreateFunc) SetDefaultReturn(r0 *beans.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TransactionServiceCreateFunc) PushReturn(r0 *beans.Transaction, r1 error) {
	f.PushHook(func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error) {
		return r0, r1
	})
}

func (f *TransactionServiceCreateFunc) nextHook() func(context.Context, *beans.Budget, beans.TransactionCreate) (*beans.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TransactionServiceCreateFunc) appendCall(r0 TransactionServiceCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TransactionServiceCreateFuncCall objects
// describing the invocations of this function.
func (f *TransactionServiceCreateFunc) History() []TransactionServiceCreateFuncCall {
	f.mutex.Lock()
	history := make([]TransactionServiceCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TransactionServiceCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockTransactionService.
type TransactionServiceCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *beans.Budget
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.TransactionCreate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TransactionServiceCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TransactionServiceCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUserRepository is a mock implementation of the UserRepository
// interface (from the package github.com/bradenrayhorn/beans/beans) used
// for unit testing.
type MockUserRepository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserRepositoryCreateFunc
	// ExistsFunc is an instance of a mock function object controlling the
	// behavior of the method Exists.
	ExistsFunc *UserRepositoryExistsFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserRepositoryGetFunc
	// GetByUsernameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsername.
	GetByUsernameFunc *UserRepositoryGetByUsernameFunc
}

// NewMockUserRepository creates a new mock of the UserRepository interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUserRepository() *MockUserRepository {
	return &MockUserRepository{
		CreateFunc: &UserRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) (r0 error) {
				return
			},
		},
		ExistsFunc: &UserRepositoryExistsFunc{
			defaultHook: func(context.Context, beans.Username) (r0 bool, r1 error) {
				return
			},
		},
		GetFunc: &UserRepositoryGetFunc{
			defaultHook: func(context.Context, beans.UserID) (r0 *beans.User, r1 error) {
				return
			},
		},
		GetByUsernameFunc: &UserRepositoryGetByUsernameFunc{
			defaultHook: func(context.Context, beans.Username) (r0 *beans.User, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUserRepository creates a new mock of the UserRepository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUserRepository() *MockUserRepository {
	return &MockUserRepository{
		CreateFunc: &UserRepositoryCreateFunc{
			defaultHook: func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error {
				panic("unexpected invocation of MockUserRepository.Create")
			},
		},
		ExistsFunc: &UserRepositoryExistsFunc{
			defaultHook: func(context.Context, beans.Username) (bool, error) {
				panic("unexpected invocation of MockUserRepository.Exists")
			},
		},
		GetFunc: &UserRepositoryGetFunc{
			defaultHook: func(context.Context, beans.UserID) (*beans.User, error) {
				panic("unexpected invocation of MockUserRepository.Get")
			},
		},
		GetByUsernameFunc: &UserRepositoryGetByUsernameFunc{
			defaultHook: func(context.Context, beans.Username) (*beans.User, error) {
				panic("unexpected invocation of MockUserRepository.GetByUsername")
			},
		},
	}
}

// NewMockUserRepositoryFrom creates a new mock of the MockUserRepository
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserRepositoryFrom(i beans.UserRepository) *MockUserRepository {
	return &MockUserRepository{
		CreateFunc: &UserRepositoryCreateFunc{
			defaultHook: i.Create,
		},
		ExistsFunc: &UserRepositoryExistsFunc{
			defaultHook: i.Exists,
		},
		GetFunc: &UserRepositoryGetFunc{
			defaultHook: i.Get,
		},
		GetByUsernameFunc: &UserRepositoryGetByUsernameFunc{
			defaultHook: i.GetByUsername,
		},
	}
}

// UserRepositoryCreateFunc describes the behavior when the Create method of
// the parent MockUserRepository instance is invoked.
type UserRepositoryCreateFunc struct {
	defaultHook func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error
	hooks       []func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error
	history     []UserRepositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRepository) Create(v0 context.Context, v1 beans.UserID, v2 beans.Username, v3 beans.PasswordHash) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(UserRepositoryCreateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserRepository instance is invoked and the hook queue is
// empty.
func (f *UserRepositoryCreateFunc) SetDefaultHook(hook func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRepositoryCreateFunc) PushHook(hook func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error {
		return r0
	})
}

func (f *UserRepositoryCreateFunc) nextHook() func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryCreateFunc) appendCall(r0 UserRepositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryCreateFunc) History() []UserRepositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockUserRepository.
type UserRepositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.UserID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Username
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 beans.PasswordHash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRepositoryExistsFunc describes the behavior when the Exists method of
// the parent MockUserRepository instance is invoked.
type UserRepositoryExistsFunc struct {
	defaultHook func(context.Context, beans.Username) (bool, error)
	hooks       []func(context.Context, beans.Username) (bool, error)
	history     []UserRepositoryExistsFuncCall
	mutex       sync.Mutex
}

// Exists delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRepository) Exists(v0 context.Context, v1 beans.Username) (bool, error) {
	r0, r1 := m.ExistsFunc.nextHook()(v0, v1)
	m.ExistsFunc.appendCall(UserRepositoryExistsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exists method of the
// parent MockUserRepository instance is invoked and the hook queue is
// empty.
func (f *UserRepositoryExistsFunc) SetDefaultHook(hook func(context.Context, beans.Username) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exists method of the parent MockUserRepository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRepositoryExistsFunc) PushHook(hook func(context.Context, beans.Username) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, beans.Username) (bool, error) {
		return r0, r1
	})
}

func (f *UserRepositoryExistsFunc) nextHook() func(context.Context, beans.Username) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryExistsFunc) appendCall(r0 UserRepositoryExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryExistsFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryExistsFunc) History() []UserRepositoryExistsFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryExistsFuncCall is an object that describes an invocation of
// method Exists on an instance of MockUserRepository.
type UserRepositoryExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserRepositoryGetFunc describes the behavior when the Get method of the
// parent MockUserRepository instance is invoked.
type UserRepositoryGetFunc struct {
	defaultHook func(context.Context, beans.UserID) (*beans.User, error)
	hooks       []func(context.Context, beans.UserID) (*beans.User, error)
	history     []UserRepositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRepository) Get(v0 context.Context, v1 beans.UserID) (*beans.User, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(UserRepositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserRepository instance is invoked and the hook queue is
// empty.
func (f *UserRepositoryGetFunc) SetDefaultHook(hook func(context.Context, beans.UserID) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserRepository instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRepositoryGetFunc) PushHook(hook func(context.Context, beans.UserID) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryGetFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.UserID) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryGetFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.UserID) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserRepositoryGetFunc) nextHook() func(context.Context, beans.UserID) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryGetFunc) appendCall(r0 UserRepositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryGetFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryGetFunc) History() []UserRepositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockUserRepository.
type UserRepositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.UserID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserRepositoryGetByUsernameFunc describes the behavior when the
// GetByUsername method of the parent MockUserRepository instance is
// invoked.
type UserRepositoryGetByUsernameFunc struct {
	defaultHook func(context.Context, beans.Username) (*beans.User, error)
	hooks       []func(context.Context, beans.Username) (*beans.User, error)
	history     []UserRepositoryGetByUsernameFuncCall
	mutex       sync.Mutex
}

// GetByUsername delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserRepository) GetByUsername(v0 context.Context, v1 beans.Username) (*beans.User, error) {
	r0, r1 := m.GetByUsernameFunc.nextHook()(v0, v1)
	m.GetByUsernameFunc.appendCall(UserRepositoryGetByUsernameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsername method
// of the parent MockUserRepository instance is invoked and the hook queue
// is empty.
func (f *UserRepositoryGetByUsernameFunc) SetDefaultHook(hook func(context.Context, beans.Username) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsername method of the parent MockUserRepository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserRepositoryGetByUsernameFunc) PushHook(hook func(context.Context, beans.Username) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRepositoryGetByUsernameFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRepositoryGetByUsernameFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.Username) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserRepositoryGetByUsernameFunc) nextHook() func(context.Context, beans.Username) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRepositoryGetByUsernameFunc) appendCall(r0 UserRepositoryGetByUsernameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRepositoryGetByUsernameFuncCall objects
// describing the invocations of this function.
func (f *UserRepositoryGetByUsernameFunc) History() []UserRepositoryGetByUsernameFuncCall {
	f.mutex.Lock()
	history := make([]UserRepositoryGetByUsernameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRepositoryGetByUsernameFuncCall is an object that describes an
// invocation of method GetByUsername on an instance of MockUserRepository.
type UserRepositoryGetByUsernameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRepositoryGetByUsernameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRepositoryGetByUsernameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUserService is a mock implementation of the UserService interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockUserService struct {
	// CreateUserFunc is an instance of a mock function object controlling
	// the behavior of the method CreateUser.
	CreateUserFunc *UserServiceCreateUserFunc
	// LoginFunc is an instance of a mock function object controlling the
	// behavior of the method Login.
	LoginFunc *UserServiceLoginFunc
}

// NewMockUserService creates a new mock of the UserService interface. All
// methods return zero values for all results, unless overwritten.
func NewMockUserService() *MockUserService {
	return &MockUserService{
		CreateUserFunc: &UserServiceCreateUserFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (r0 *beans.User, r1 error) {
				return
			},
		},
		LoginFunc: &UserServiceLoginFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (r0 *beans.User, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUserService creates a new mock of the UserService interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockUserService() *MockUserService {
	return &MockUserService{
		CreateUserFunc: &UserServiceCreateUserFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
				panic("unexpected invocation of MockUserService.CreateUser")
			},
		},
		LoginFunc: &UserServiceLoginFunc{
			defaultHook: func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
				panic("unexpected invocation of MockUserService.Login")
			},
		},
	}
}

// NewMockUserServiceFrom creates a new mock of the MockUserService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserServiceFrom(i beans.UserService) *MockUserService {
	return &MockUserService{
		CreateUserFunc: &UserServiceCreateUserFunc{
			defaultHook: i.CreateUser,
		},
		LoginFunc: &UserServiceLoginFunc{
			defaultHook: i.Login,
		},
	}
}

// UserServiceCreateUserFunc describes the behavior when the CreateUser
// method of the parent MockUserService instance is invoked.
type UserServiceCreateUserFunc struct {
	defaultHook func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	hooks       []func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	history     []UserServiceCreateUserFuncCall
	mutex       sync.Mutex
}

// CreateUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserService) CreateUser(v0 context.Context, v1 beans.Username, v2 beans.Password) (*beans.User, error) {
	r0, r1 := m.CreateUserFunc.nextHook()(v0, v1, v2)
	m.CreateUserFunc.appendCall(UserServiceCreateUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateUser method of
// the parent MockUserService instance is invoked and the hook queue is
// empty.
func (f *UserServiceCreateUserFunc) SetDefaultHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateUser method of the parent MockUserService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserServiceCreateUserFunc) PushHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserServiceCreateUserFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserServiceCreateUserFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserServiceCreateUserFunc) nextHook() func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserServiceCreateUserFunc) appendCall(r0 UserServiceCreateUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserServiceCreateUserFuncCall objects
// describing the invocations of this function.
func (f *UserServiceCreateUserFunc) History() []UserServiceCreateUserFuncCall {
	f.mutex.Lock()
	history := make([]UserServiceCreateUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserServiceCreateUserFuncCall is an object that describes an invocation
// of method CreateUser on an instance of MockUserService.
type UserServiceCreateUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Password
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserServiceCreateUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserServiceCreateUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserServiceLoginFunc describes the behavior when the Login method of the
// parent MockUserService instance is invoked.
type UserServiceLoginFunc struct {
	defaultHook func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	hooks       []func(context.Context, beans.Username, beans.Password) (*beans.User, error)
	history     []UserServiceLoginFuncCall
	mutex       sync.Mutex
}

// Login delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserService) Login(v0 context.Context, v1 beans.Username, v2 beans.Password) (*beans.User, error) {
	r0, r1 := m.LoginFunc.nextHook()(v0, v1, v2)
	m.LoginFunc.appendCall(UserServiceLoginFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Login method of the
// parent MockUserService instance is invoked and the hook queue is empty.
func (f *UserServiceLoginFunc) SetDefaultHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Login method of the parent MockUserService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserServiceLoginFunc) PushHook(hook func(context.Context, beans.Username, beans.Password) (*beans.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserServiceLoginFunc) SetDefaultReturn(r0 *beans.User, r1 error) {
	f.SetDefaultHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserServiceLoginFunc) PushReturn(r0 *beans.User, r1 error) {
	f.PushHook(func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
		return r0, r1
	})
}

func (f *UserServiceLoginFunc) nextHook() func(context.Context, beans.Username, beans.Password) (*beans.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserServiceLoginFunc) appendCall(r0 UserServiceLoginFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserServiceLoginFuncCall objects describing
// the invocations of this function.
func (f *UserServiceLoginFunc) History() []UserServiceLoginFuncCall {
	f.mutex.Lock()
	history := make([]UserServiceLoginFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserServiceLoginFuncCall is an object that describes an invocation of
// method Login on an instance of MockUserService.
type UserServiceLoginFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 beans.Username
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 beans.Password
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *beans.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserServiceLoginFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserServiceLoginFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockValidatable is a mock implementation of the Validatable interface
// (from the package github.com/bradenrayhorn/beans/beans) used for unit
// testing.
type MockValidatable struct {
	// ValidateFunc is an instance of a mock function object controlling the
	// behavior of the method Validate.
	ValidateFunc *ValidatableValidateFunc
}

// NewMockValidatable creates a new mock of the Validatable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockValidatable creates a new mock of the Validatable interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockValidatable.Validate")
			},
		},
	}
}

// NewMockValidatableFrom creates a new mock of the MockValidatable
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockValidatableFrom(i beans.Validatable) *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: i.Validate,
		},
	}
}

// ValidatableValidateFunc describes the behavior when the Validate method
// of the parent MockValidatable instance is invoked.
type ValidatableValidateFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ValidatableValidateFuncCall
	mutex       sync.Mutex
}

// Validate delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockValidatable) Validate() error {
	r0 := m.ValidateFunc.nextHook()()
	m.ValidateFunc.appendCall(ValidatableValidateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Validate method of
// the parent MockValidatable instance is invoked and the hook queue is
// empty.
func (f *ValidatableValidateFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Validate method of the parent MockValidatable instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ValidatableValidateFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ValidatableValidateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ValidatableValidateFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ValidatableValidateFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ValidatableValidateFunc) appendCall(r0 ValidatableValidateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ValidatableValidateFuncCall objects
// describing the invocations of this function.
func (f *ValidatableValidateFunc) History() []ValidatableValidateFuncCall {
	f.mutex.Lock()
	history := make([]ValidatableValidateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ValidatableValidateFuncCall is an object that describes an invocation of
// method Validate on an instance of MockValidatable.
type ValidatableValidateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ValidatableValidateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ValidatableValidateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
