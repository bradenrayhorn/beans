// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beans "github.com/bradenrayhorn/beans/beans"

	mock "github.com/stretchr/testify/mock"
)

// CategoryService is an autogenerated mock type for the CategoryService type
type CategoryService struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: ctx, budgetID, groupID, name
func (_m *CategoryService) CreateCategory(ctx context.Context, budgetID beans.ID, groupID beans.ID, name beans.Name) (*beans.Category, error) {
	ret := _m.Called(ctx, budgetID, groupID, name)

	var r0 *beans.Category
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID, beans.ID, beans.Name) *beans.Category); ok {
		r0 = rf(ctx, budgetID, groupID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*beans.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID, beans.ID, beans.Name) error); ok {
		r1 = rf(ctx, budgetID, groupID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, budgetID, name
func (_m *CategoryService) CreateGroup(ctx context.Context, budgetID beans.ID, name beans.Name) (*beans.CategoryGroup, error) {
	ret := _m.Called(ctx, budgetID, name)

	var r0 *beans.CategoryGroup
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID, beans.Name) *beans.CategoryGroup); ok {
		r0 = rf(ctx, budgetID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*beans.CategoryGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID, beans.Name) error); ok {
		r1 = rf(ctx, budgetID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCategoryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryService creates a new instance of CategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryService(t mockConstructorTestingTNewCategoryService) *CategoryService {
	mock := &CategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
