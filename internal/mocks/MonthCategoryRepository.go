// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beans "github.com/bradenrayhorn/beans/beans"

	mock "github.com/stretchr/testify/mock"
)

// MonthCategoryRepository is an autogenerated mock type for the MonthCategoryRepository type
type MonthCategoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, monthCategory
func (_m *MonthCategoryRepository) Create(ctx context.Context, monthCategory *beans.MonthCategory) error {
	ret := _m.Called(ctx, monthCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *beans.MonthCategory) error); ok {
		r0 = rf(ctx, monthCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetForMonth provides a mock function with given fields: ctx, monthID
func (_m *MonthCategoryRepository) GetForMonth(ctx context.Context, monthID beans.ID) ([]*beans.MonthCategory, error) {
	ret := _m.Called(ctx, monthID)

	var r0 []*beans.MonthCategory
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID) []*beans.MonthCategory); ok {
		r0 = rf(ctx, monthID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*beans.MonthCategory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID) error); ok {
		r1 = rf(ctx, monthID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMonthCategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMonthCategoryRepository creates a new instance of MonthCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMonthCategoryRepository(t mockConstructorTestingTNewMonthCategoryRepository) *MonthCategoryRepository {
	mock := &MonthCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
