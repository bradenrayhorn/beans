// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beans "github.com/bradenrayhorn/beans/beans"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, id, username, passwordHash
func (_m *UserRepository) Create(ctx context.Context, id beans.UserID, username beans.Username, passwordHash beans.PasswordHash) error {
	ret := _m.Called(ctx, id, username, passwordHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, beans.UserID, beans.Username, beans.PasswordHash) error); ok {
		r0 = rf(ctx, id, username, passwordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, username
func (_m *UserRepository) Exists(ctx context.Context, username beans.Username) (bool, error) {
	ret := _m.Called(ctx, username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, beans.Username) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.Username) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserRepository) Get(ctx context.Context, id beans.UserID) (*beans.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *beans.User
	if rf, ok := ret.Get(0).(func(context.Context, beans.UserID) *beans.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*beans.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepository) GetByUsername(ctx context.Context, username beans.Username) (*beans.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *beans.User
	if rf, ok := ret.Get(0).(func(context.Context, beans.Username) *beans.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*beans.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.Username) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
