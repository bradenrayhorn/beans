// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beans "github.com/bradenrayhorn/beans/beans"

	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *CategoryRepository) Create(_a0 context.Context, _a1 *beans.Category) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *beans.Category) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroup provides a mock function with given fields: _a0, _a1
func (_m *CategoryRepository) CreateGroup(_a0 context.Context, _a1 *beans.CategoryGroup) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *beans.CategoryGroup) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetForBudget provides a mock function with given fields: ctx, budgetID
func (_m *CategoryRepository) GetForBudget(ctx context.Context, budgetID beans.ID) ([]*beans.Category, error) {
	ret := _m.Called(ctx, budgetID)

	var r0 []*beans.Category
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID) []*beans.Category); ok {
		r0 = rf(ctx, budgetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*beans.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID) error); ok {
		r1 = rf(ctx, budgetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsForBudget provides a mock function with given fields: ctx, budgetID
func (_m *CategoryRepository) GetGroupsForBudget(ctx context.Context, budgetID beans.ID) ([]*beans.CategoryGroup, error) {
	ret := _m.Called(ctx, budgetID)

	var r0 []*beans.CategoryGroup
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID) []*beans.CategoryGroup); ok {
		r0 = rf(ctx, budgetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*beans.CategoryGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID) error); ok {
		r1 = rf(ctx, budgetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupExists provides a mock function with given fields: ctx, budgetID, id
func (_m *CategoryRepository) GroupExists(ctx context.Context, budgetID beans.ID, id beans.ID) (bool, error) {
	ret := _m.Called(ctx, budgetID, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID, beans.ID) bool); ok {
		r0 = rf(ctx, budgetID, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID, beans.ID) error); ok {
		r1 = rf(ctx, budgetID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryRepository(t mockConstructorTestingTNewCategoryRepository) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
