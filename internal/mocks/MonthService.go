// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beans "github.com/bradenrayhorn/beans/beans"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MonthService is an autogenerated mock type for the MonthService type
type MonthService struct {
	mock.Mock
}

// GetOrCreate provides a mock function with given fields: ctx, budgetID, date
func (_m *MonthService) GetOrCreate(ctx context.Context, budgetID beans.ID, date time.Time) (*beans.Month, error) {
	ret := _m.Called(ctx, budgetID, date)

	var r0 *beans.Month
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID, time.Time) *beans.Month); ok {
		r0 = rf(ctx, budgetID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*beans.Month)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID, time.Time) error); ok {
		r1 = rf(ctx, budgetID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMonthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMonthService creates a new instance of MonthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMonthService(t mockConstructorTestingTNewMonthService) *MonthService {
	mock := &MonthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
