// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beans "github.com/bradenrayhorn/beans/beans"

	mock "github.com/stretchr/testify/mock"
)

// BudgetRepository is an autogenerated mock type for the BudgetRepository type
type BudgetRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, id, name, userID
func (_m *BudgetRepository) Create(ctx context.Context, id beans.ID, name beans.Name, userID beans.UserID) error {
	ret := _m.Called(ctx, id, name, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID, beans.Name, beans.UserID) error); ok {
		r0 = rf(ctx, id, name, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *BudgetRepository) Get(ctx context.Context, id beans.ID) (*beans.Budget, error) {
	ret := _m.Called(ctx, id)

	var r0 *beans.Budget
	if rf, ok := ret.Get(0).(func(context.Context, beans.ID) *beans.Budget); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*beans.Budget)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudgetsForUser provides a mock function with given fields: ctx, userID
func (_m *BudgetRepository) GetBudgetsForUser(ctx context.Context, userID beans.UserID) ([]*beans.Budget, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*beans.Budget
	if rf, ok := ret.Get(0).(func(context.Context, beans.UserID) []*beans.Budget); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*beans.Budget)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, beans.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBudgetRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBudgetRepository creates a new instance of BudgetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBudgetRepository(t mockConstructorTestingTNewBudgetRepository) *BudgetRepository {
	mock := &BudgetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
