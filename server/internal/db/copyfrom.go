// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateTransaction implements pgx.CopyFromSource.
type iteratorForCreateTransaction struct {
	rows                 []CreateTransactionParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTransaction) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTransaction) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].AccountID,
		r.rows[0].PayeeID,
		r.rows[0].CategoryID,
		r.rows[0].Date,
		r.rows[0].Amount,
		r.rows[0].Notes,
		r.rows[0].TransferID,
	}, nil
}

func (r iteratorForCreateTransaction) Err() error {
	return nil
}

func (q *Queries) CreateTransaction(ctx context.Context, arg []CreateTransactionParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"transactions"}, []string{"id", "account_id", "payee_id", "category_id", "date", "amount", "notes", "transfer_id"}, &iteratorForCreateTransaction{rows: arg})
}
