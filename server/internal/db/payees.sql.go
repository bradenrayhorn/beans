// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: payees.sql

package db

import (
	"context"
)

const createPayee = `-- name: CreatePayee :exec
INSERT INTO payees (
  id, budget_id, name 
) VALUES ($1, $2, $3)
`

type CreatePayeeParams struct {
	ID       string
	BudgetID string
	Name     string
}

func (q *Queries) CreatePayee(ctx context.Context, arg CreatePayeeParams) error {
	_, err := q.db.Exec(ctx, createPayee, arg.ID, arg.BudgetID, arg.Name)
	return err
}

const getPayee = `-- name: GetPayee :one
SELECT id, name, budget_id, created_at FROM payees WHERE id = $1
`

func (q *Queries) GetPayee(ctx context.Context, id string) (Payee, error) {
	row := q.db.QueryRow(ctx, getPayee, id)
	var i Payee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BudgetID,
		&i.CreatedAt,
	)
	return i, err
}

const getPayeesForBudget = `-- name: GetPayeesForBudget :many
SELECT id, name, budget_id, created_at FROM payees WHERE budget_id = $1
`

func (q *Queries) GetPayeesForBudget(ctx context.Context, budgetID string) ([]Payee, error) {
	rows, err := q.db.Query(ctx, getPayeesForBudget, budgetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payee
	for rows.Next() {
		var i Payee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BudgetID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
